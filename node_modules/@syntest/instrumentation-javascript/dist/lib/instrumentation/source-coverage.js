"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceCoverage = void 0;
const { classes } = require("istanbul-lib-coverage");
/**
 * SourceCoverage provides mutation methods to manipulate the structure of
 * a file coverage object. Used by the instrumenter to create a full coverage
 * object for a file incrementally.
 *
 * @private
 * @param pathOrObj {String|Object} - see the argument for {@link FileCoverage}
 * @extends FileCoverage
 * @constructor
 */
class SourceCoverage extends classes.FileCoverage {
    constructor(pathOrObj) {
        super(pathOrObj);
        this._filePath = pathOrObj;
        this.meta = {
            last: {
                s: 0,
                f: 0,
                b: 0,
            },
        };
    }
    _getNodeId(loc) {
        if (loc === undefined) {
            throw new Error(`Node * in file '${this._filePath}' does not have a location`);
        }
        const startLine = loc.start.line;
        const startColumn = loc.start.column;
        const startIndex = loc.start.index;
        const endLine = loc.end.line;
        const endColumn = loc.end.column;
        const endIndex = loc.end.index;
        return `${this._filePath}:${startLine}:${startColumn}:::${endLine}:${endColumn}:::${startIndex}:${endIndex}`;
    }
    _getPlaceholderNodeId(loc) {
        if (loc === undefined) {
            throw new Error(`Node * in file '${this._filePath}' does not have a location`);
        }
        const startLine = loc.start.line;
        const startColumn = loc.start.column;
        const startIndex = loc.start.index;
        const endLine = loc.end.line;
        const endColumn = loc.end.column;
        const endIndex = loc.end.index;
        return `${this._filePath}:${startLine}:${startColumn}:::${endLine}:${endColumn}:::${startIndex}:${endIndex}`;
    }
    _cloneLocation(loc) {
        return {
            id: loc && this._getNodeId(loc),
            start: {
                line: loc && loc.start.line,
                column: loc && loc.start.column,
                index: loc && loc.start.index,
            },
            end: {
                line: loc && loc.end.line,
                column: loc && loc.end.column,
                index: loc && loc.end.index,
            },
        };
    }
    newStatement(loc, placeholder = false, double = false) {
        const s = this.meta.last.s;
        if (placeholder) {
            const clone = this._cloneLocation({
                start: loc.end,
                end: loc.end,
            });
            let id = this._getPlaceholderNodeId(loc);
            if (double) {
                id = "placeholder:::" + id;
            }
            clone.id = `placeholder:::${id}`;
            this.data.statementMap[s] = clone;
            this.data.s[s] = 0;
            this.meta.last.s += 1;
        }
        else {
            this.data.statementMap[s] = this._cloneLocation(loc);
            this.data.s[s] = 0;
            this.meta.last.s += 1;
        }
        return s;
    }
    newFunction(name, decl, loc) {
        const f = this.meta.last.f;
        name = name || "(anonymous_" + f + ")";
        this.data.fnMap[f] = {
            name,
            decl: this._cloneLocation(decl),
            loc: this._cloneLocation(loc),
            // DEPRECATED: some legacy reports require this info.
            line: loc && loc.start.line,
        };
        this.data.f[f] = 0;
        this.meta.last.f += 1;
        return f;
    }
    newBranch(type, loc, isReportLogic = false) {
        const b = this.meta.last.b;
        this.data.b[b] = [];
        this.data.branchMap[b] = {
            loc: this._cloneLocation(loc),
            type,
            locations: [],
            // DEPRECATED: some legacy reports require this info.
            line: loc && loc.start.line,
        };
        this.meta.last.b += 1;
        this.maybeNewBranchTrue(type, b, isReportLogic);
        return b;
    }
    maybeNewBranchTrue(type, name, isReportLogic) {
        if (!isReportLogic) {
            return;
        }
        if (type !== "binary-expr") {
            return;
        }
        this.data.bT = this.data.bT || {};
        this.data.bT[name] = [];
    }
    addBranchPath(ifPath, name, location) {
        const bMeta = this.data.branchMap[name];
        const counts = this.data.b[name];
        /* istanbul ignore if: paranoid check */
        if (!bMeta) {
            throw new Error("Invalid branch " + name + `${this._getNodeId(ifPath.node.loc)}`);
        }
        if (location !== undefined) {
            bMeta.locations.push(this._cloneLocation(location));
        }
        else {
            const clone = this._cloneLocation({
                start: ifPath.node.loc.end,
                end: ifPath.node.loc.end,
            });
            const id = this._getPlaceholderNodeId(ifPath.node.loc);
            clone.id = `placeholder:::${id}`;
            bMeta.locations.push(clone);
        }
        counts.push(0);
        this.maybeAddBranchTrue(name);
        return counts.length - 1;
    }
    maybeAddBranchTrue(name) {
        if (!this.data.bT) {
            return;
        }
        const countsTrue = this.data.bT[name];
        if (!countsTrue) {
            return;
        }
        countsTrue.push(0);
    }
    /**
     * Assigns an input source map to the coverage that can be used
     * to remap the coverage output to the original source
     * @param sourceMap {object} the source map
     */
    inputSourceMap(sourceMap) {
        this.data.inputSourceMap = sourceMap;
    }
    freeze() {
        // prune empty branches
        const map = this.data.branchMap;
        const branches = this.data.b;
        const branchesT = this.data.bT || {};
        Object.keys(map).forEach((b) => {
            if (map[b].locations.length === 0) {
                delete map[b];
                delete branches[b];
                delete branchesT[b];
            }
        });
    }
}
exports.SourceCoverage = SourceCoverage;
//# sourceMappingURL=source-coverage.js.map