import { NodePath } from "@babel/traverse";
import * as t from "@babel/types";
declare const classes: any;
/**
 * SourceCoverage provides mutation methods to manipulate the structure of
 * a file coverage object. Used by the instrumenter to create a full coverage
 * object for a file incrementally.
 *
 * @private
 * @param pathOrObj {String|Object} - see the argument for {@link FileCoverage}
 * @extends FileCoverage
 * @constructor
 */
export declare class SourceCoverage extends classes.FileCoverage {
    private meta;
    private data;
    private _filePath;
    constructor(pathOrObj: any);
    _getNodeId(loc: any): string;
    _getPlaceholderNodeId(loc: any): string;
    _cloneLocation(loc: any): {
        id: string;
        start: {
            line: any;
            column: any;
            index: any;
        };
        end: {
            line: any;
            column: any;
            index: any;
        };
    };
    newStatement(loc: any, placeholder?: boolean, double?: boolean): any;
    newFunction(name: any, decl: any, loc: any): any;
    newBranch(type: any, loc: any, isReportLogic?: boolean): any;
    maybeNewBranchTrue(type: any, name: any, isReportLogic: any): void;
    addBranchPath(ifPath: NodePath<t.Node>, name: any, location: any): number;
    maybeAddBranchTrue(name: any): void;
    /**
     * Assigns an input source map to the coverage that can be used
     * to remap the coverage output to the original source
     * @param sourceMap {object} the source map
     */
    inputSourceMap(sourceMap: any): void;
    freeze(): void;
}
export {};
//# sourceMappingURL=source-coverage.d.ts.map