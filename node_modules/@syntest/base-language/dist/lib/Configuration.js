"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = exports.OptionGroups = void 0;
var OptionGroups;
(function (OptionGroups) {
    OptionGroups["Storage"] = "Storage Options:";
    OptionGroups["Target"] = "Target Options:";
    OptionGroups["SearchAlgorithm"] = "Search Algorithm Options:";
    OptionGroups["Budget"] = "Budget Options:";
    OptionGroups["PostProccessing"] = "Post Proccessing Options:";
    OptionGroups["Sampling"] = "Sampling Options:";
    OptionGroups["ResearchMode"] = "Research Mode Options:";
})(OptionGroups = exports.OptionGroups || (exports.OptionGroups = {}));
class Configuration {
    getOptions() {
        return {
            ...this.getTargetOptions(),
            ...this.getStorageOptions(),
            ...this.getAlgorithmOptions(),
            ...this.getBudgetOptions(),
            ...this.getPostProcessingOptions(),
            ...this.getSamplingOptions(),
            ...this.getResearchModeOptions(),
        };
    }
    getTargetOptions() {
        return {
            // Files
            "target-root-directory": {
                alias: ["r"],
                demandOption: true,
                description: "The root directory where all targets are in",
                group: OptionGroups.Target,
                hidden: false,
                normalize: true,
                type: "string",
            },
            "target-include": {
                alias: ["i"],
                default: [],
                description: "Files/Directories to include as targets",
                group: OptionGroups.Target,
                hidden: false,
                normalize: true,
                type: "array",
            },
            "target-exclude": {
                alias: ["e"],
                default: [],
                description: "Files/Directories to exclude as targets",
                group: OptionGroups.Target,
                hidden: false,
                normalize: true,
                type: "array",
            },
            "analysis-include": {
                alias: [],
                default: [],
                description: "Files/Directories to include for analysis",
                group: OptionGroups.Target,
                hidden: false,
                normalize: true,
                type: "array",
            },
            "analysis-exclude": {
                alias: [],
                default: [],
                description: "Files/Directories to exclude for analysis",
                group: OptionGroups.Target,
                hidden: false,
                normalize: true,
                type: "array",
            },
        };
    }
    getStorageOptions() {
        return {
            // directories
            "statistics-directory": {
                alias: [],
                default: "statistics",
                description: "The path where the csv should be saved (within the syntest-directory)",
                group: OptionGroups.Storage,
                hidden: false,
                normalize: true,
                type: "string",
            },
            "test-directory": {
                alias: [],
                default: "tests",
                description: "The path where the final test suite should be saved (within the syntest-directory)",
                group: OptionGroups.Storage,
                hidden: false,
                normalize: true,
                type: "string",
            },
            "instrumented-directory": {
                alias: [],
                default: "instrumented",
                description: "Path to the temporary instrumented directory (within the temp-syntest-directory)",
                group: OptionGroups.Storage,
                hidden: false,
                normalize: true,
                type: "string",
            },
        };
    }
    getAlgorithmOptions() {
        return {
            "search-algorithm": {
                alias: ["a"],
                choices: [],
                description: "Search algorithm to be used by the tool.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "string",
            },
            "population-size": {
                alias: [],
                default: 50,
                description: "Size of the population.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "number",
            },
            "objective-manager": {
                alias: [],
                choices: [],
                description: "Objective manager to be used by the tool.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "string",
            },
            "secondary-objectives": {
                alias: [],
                default: [],
                choices: [],
                description: "Secondary objectives to be used by the tool.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "string",
            },
            crossover: {
                alias: [],
                choices: [],
                description: "Crossover operator to be used by the tool.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "string",
            },
            procreation: {
                alias: [],
                choices: [],
                description: "Procreation operator to be used by the tool.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "string",
            },
            sampler: {
                alias: [],
                choices: [],
                description: "Sampler to be used by the tool.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "string",
            },
            "termination-triggers": {
                alias: [],
                default: ["signal"],
                choices: [],
                description: "Termination trigger to be used by the tool.",
                group: OptionGroups.SearchAlgorithm,
                hidden: false,
                type: "array",
            },
        };
    }
    getBudgetOptions() {
        return {
            "total-time": {
                alias: ["t"],
                default: Number.MAX_SAFE_INTEGER,
                description: "Total time budget in seconds",
                group: OptionGroups.Budget,
                hidden: false,
                type: "number",
            },
            "search-time": {
                alias: [],
                default: Number.MAX_SAFE_INTEGER,
                description: "Search time budget in seconds",
                group: OptionGroups.Budget,
                hidden: false,
                type: "number",
            },
            iterations: {
                alias: [],
                default: Number.MAX_SAFE_INTEGER,
                description: "Iteration budget",
                group: OptionGroups.Budget,
                hidden: false,
                type: "number",
            },
            evaluations: {
                alias: [],
                default: Number.MAX_SAFE_INTEGER,
                description: "Evaluation budget",
                group: OptionGroups.Budget,
                hidden: false,
                type: "number",
            },
        };
    }
    getPostProcessingOptions() {
        return {
            "test-minimization": {
                alias: [],
                default: false,
                description: "Minimize test cases at the end of the search",
                group: OptionGroups.PostProccessing,
                hidden: false,
                type: "boolean",
            },
        };
    }
    getSamplingOptions() {
        return {
            // sampling settings
            "max-depth": {
                alias: [],
                default: 5,
                description: "Max depth of an individual's gene tree.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "number",
            },
            "max-action-statements": {
                alias: [],
                default: 5,
                description: "Max number of top level action statements in an individual's gene tree.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "number",
            },
            // mutation settings
            "explore-illegal-values": {
                alias: [],
                default: false,
                description: "Allow primitives to become values outside of the specified bounds.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "boolean",
            },
            // probability settings
            "delta-mutation-probability": {
                alias: [],
                default: 0.8,
                description: "Probability a delta mutation is performed.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "number",
            },
            "crossover-probability": {
                alias: [],
                default: 0.7,
                description: "Probability crossover happens for a certain encoding.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "number",
            },
            "multi-point-crossover-probability": {
                alias: [],
                default: 0.5,
                description: "Probability crossover happens at a certain branch point.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "number",
            },
            // gene defaults
            "string-alphabet": {
                alias: [],
                default: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()-_=+[]{};:'\"|\\,.<>/?~§±`'\n\t",
                description: "The alphabet to be used by the string gene.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "string",
            },
            "string-max-length": {
                alias: [],
                default: 100,
                description: "Maximal length of the string gene.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "number",
            },
            "numeric-max-value": {
                alias: [],
                default: Number.MAX_SAFE_INTEGER,
                description: "Max value used by the numeric gene.",
                group: OptionGroups.Sampling,
                hidden: false,
                type: "number",
            },
        };
    }
    getResearchModeOptions() {
        return {
            configuration: {
                alias: [],
                default: "",
                description: "The name of the configuration.",
                group: OptionGroups.ResearchMode,
                hidden: false,
                type: "string",
            },
        };
    }
}
exports.Configuration = Configuration;
//# sourceMappingURL=Configuration.js.map