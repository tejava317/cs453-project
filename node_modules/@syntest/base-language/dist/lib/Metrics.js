"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metrics = exports.PropertyName = exports.SeriesName = void 0;
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const metric_1 = require("@syntest/metric");
var SeriesName;
(function (SeriesName) {
    SeriesName["OBJECTIVE_DISTANCE"] = "objective-distance";
    SeriesName["BRANCHES_COVERED"] = "branches-covered";
    SeriesName["STATEMENTS_COVERED"] = "statements-covered";
    SeriesName["FUNCTIONS_COVERED"] = "functions-covered";
    SeriesName["PATH_OBJECTIVES_COVERED"] = "path-objectives-covered";
    SeriesName["BRANCH_OBJECTIVES_COVERED"] = "branch-objectives-covered";
    SeriesName["EXCEPTION_OBJECTIVES_COVERED"] = "exception-objectives-covered";
    SeriesName["FUNCTION_OBJECTIVES_COVERED"] = "function-objectives-covered";
    SeriesName["LINE_OBJECTIVES_COVERED"] = "line-objectives-covered";
    SeriesName["IMPLICIT_BRANCH_OBJECTIVES_COVERED"] = "implicit-branch-objectives-covered";
    SeriesName["OBJECTIVES_COVERED"] = "objectives-covered";
    SeriesName["ARCHIVE_SIZE"] = "archive-size";
})(SeriesName = exports.SeriesName || (exports.SeriesName = {}));
var PropertyName;
(function (PropertyName) {
    PropertyName["BRANCHES_COVERED"] = "branches-covered";
    PropertyName["STATEMENTS_COVERED"] = "statements-covered";
    PropertyName["FUNCTIONS_COVERED"] = "functions-covered";
    PropertyName["BRANCHES_TOTAL"] = "branches-total";
    PropertyName["STATEMENTS_TOTAL"] = "statements-total";
    PropertyName["FUNCTIONS_TOTAL"] = "functions-total";
    PropertyName["PATH_OBJECTIVES_COVERED"] = "path-objectives-covered";
    PropertyName["BRANCH_OBJECTIVES_COVERED"] = "branch-objectives-covered";
    PropertyName["EXCEPTION_OBJECTIVES_COVERED"] = "exception-objectives-covered";
    PropertyName["FUNCTION_OBJECTIVES_COVERED"] = "function-objectives-covered";
    PropertyName["LINE_OBJECTIVES_COVERED"] = "line-objectives-covered";
    PropertyName["IMPLICIT_BRANCH_OBJECTIVES_COVERED"] = "implicit-branch-objectives-covered";
    PropertyName["OBJECTIVES_COVERED"] = "objectives-covered";
    PropertyName["PATH_OBJECTIVES_TOTAL"] = "path-objectives-total";
    PropertyName["BRANCH_OBJECTIVES_TOTAL"] = "branch-objectives-total";
    PropertyName["EXCEPTION_OBJECTIVES_TOTAL"] = "exception-objectives-total";
    PropertyName["FUNCTION_OBJECTIVES_TOTAL"] = "function-objectives-total";
    PropertyName["LINE_OBJECTIVES_TOTAL"] = "line-objectives-total";
    PropertyName["IMPLICIT_BRANCH_OBJECTIVES_TOTAL"] = "implicit-branch-objectives-total";
    PropertyName["OBJECTIVES_TOTAL"] = "objectives-total";
    // config settings
    PropertyName["PRESET"] = "preset";
    PropertyName["TARGET_ROOT_DIRECTORY"] = "target-root-directory";
    PropertyName["INCLUDE"] = "include";
    PropertyName["EXCLUDE"] = "exclude";
    PropertyName["SEARCH_ALGORITHM"] = "search-algorithm";
    PropertyName["POPULATION_SIZE"] = "population-size";
    PropertyName["OBJECTIVE_MANAGER"] = "objective-manager";
    PropertyName["SECONDARY_OBJECTIVES"] = "secondary-objectives";
    PropertyName["PROCREATION"] = "procreation";
    PropertyName["CROSSOVER"] = "crossover";
    PropertyName["SAMPLER"] = "sampler";
    PropertyName["TERMINATION_TRIGGERS"] = "termination-triggers";
    PropertyName["MAX_TOTAL_TIME"] = "max-total-time";
    PropertyName["MAX_SEARCH_TIME"] = "max-search-time";
    PropertyName["MAX_EVALUATIONS"] = "max-evaluations";
    PropertyName["MAX_ITERATIONS"] = "max-iterations";
    PropertyName["TEST_MINIMIZATION"] = "test-minimization";
    PropertyName["RANDOM_SEED"] = "random-seed";
    PropertyName["MAX_DEPTH"] = "max-depth";
    PropertyName["MAX_ACTION_STATEMENTS"] = "max-action-statements";
    PropertyName["CONSTANT_POOL_ENABLED"] = "constant-pool-enabled";
    PropertyName["EXPLORE_ILLEGAL_VALUES"] = "explore-illegal-values";
    PropertyName["RESAMPLE_GENE_PROBABILITY"] = "resample-gene-probability";
    PropertyName["DELTA_MUTATION_PROBABILITY"] = "delta-mutation-probability";
    PropertyName["SAMPLE_EXISTING_VALUE_PROBABILITY"] = "sample-existing-value-probability";
    PropertyName["MULTI_POINT_CROSSOVER_PROBABILITY"] = "multi-point-crossover-probability";
    PropertyName["CROSSOVER_PROBABILITY"] = "crossover-probability";
    PropertyName["CONSTANT_POOL_PROBABILITY"] = "constant-pool-probability";
    PropertyName["SAMPLE_FUNCTION_OUTPUT_AS_ARGUMENT"] = "sample-function-output-as-argument";
    PropertyName["STRING_ALPHABET"] = "string-alphabet";
    PropertyName["STRING_MAX_LENGTH"] = "string-max-length";
    PropertyName["NUMERIC_MAX_VALUE"] = "numeric-max-value";
    PropertyName["CONFIGURATION"] = "configuration";
    // timing and iterations/evaluations
    PropertyName["TOTAL_TIME"] = "total-time";
    PropertyName["SEARCH_TIME"] = "search-time";
    PropertyName["EVALUATIONS"] = "evaluations";
    PropertyName["ITERATIONS"] = "iterations";
    PropertyName["INITIALIZATION_TIME"] = "initialization-time";
    PropertyName["PREPROCESS_TIME"] = "pre-process-time";
    PropertyName["PROCESS_TIME"] = "process-time";
    PropertyName["POSTPROCESS_TIME"] = "post-process-time";
    PropertyName["TARGET_LOAD_TIME"] = "target-load-time";
    PropertyName["INSTRUMENTATION_TIME"] = "instrumentation-time";
    PropertyName["TYPE_RESOLVE_TIME"] = "type-resolve-time";
    // other results
    PropertyName["ARCHIVE_SIZE"] = "archive-size";
    PropertyName["MINIMIZED_ARCHIVE_SIZE"] = "minimized-archive-size";
})(PropertyName = exports.PropertyName || (exports.PropertyName = {}));
exports.metrics = [
    {
        type: metric_1.MetricType.SERIES_MEASUREMENT,
        name: SeriesName.OBJECTIVE_DISTANCE,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES_MEASUREMENT,
        name: SeriesName.OBJECTIVE_DISTANCE,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES_MEASUREMENT,
        name: SeriesName.OBJECTIVE_DISTANCE,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES_MEASUREMENT,
        name: SeriesName.OBJECTIVE_DISTANCE,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    // coverage
    // search time
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.STATEMENTS_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCHES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTIONS_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.PATH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.EXCEPTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.LINE_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.IMPLICIT_BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.SEARCH_TIME,
    },
    // total time
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.STATEMENTS_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCHES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTIONS_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.PATH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.EXCEPTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.LINE_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.IMPLICIT_BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    // iterations
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.STATEMENTS_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCHES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTIONS_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.PATH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.EXCEPTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.LINE_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.IMPLICIT_BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.ITERATION,
    },
    // evaluations
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.STATEMENTS_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCHES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTIONS_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.PATH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.EXCEPTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.FUNCTION_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.LINE_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.IMPLICIT_BRANCH_OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.OBJECTIVES_COVERED,
        seriesUnit: metric_1.SeriesUnit.EVALUATION,
    },
    // totals
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.STATEMENTS_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.BRANCHES_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.FUNCTIONS_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.PATH_OBJECTIVES_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.BRANCH_OBJECTIVES_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.FUNCTION_OBJECTIVES_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.EXCEPTION_OBJECTIVES_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.LINE_OBJECTIVES_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.IMPLICIT_BRANCH_OBJECTIVES_TOTAL,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.OBJECTIVES_TOTAL,
    },
    // final coverage
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.STATEMENTS_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.BRANCHES_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.FUNCTIONS_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.PATH_OBJECTIVES_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.BRANCH_OBJECTIVES_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.FUNCTION_OBJECTIVES_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.EXCEPTION_OBJECTIVES_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.LINE_OBJECTIVES_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.IMPLICIT_BRANCH_OBJECTIVES_COVERED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.OBJECTIVES_COVERED,
    },
    // general properties
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.PRESET,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.TARGET_ROOT_DIRECTORY,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.INCLUDE,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.EXCLUDE,
    },
    // search
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.SEARCH_ALGORITHM,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.POPULATION_SIZE,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.OBJECTIVE_MANAGER,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.SECONDARY_OBJECTIVES,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.PROCREATION,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.CROSSOVER,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.SAMPLER,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.TERMINATION_TRIGGERS,
    },
    // timing
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MAX_TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MAX_SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MAX_EVALUATIONS,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MAX_ITERATIONS,
    },
    // postprocess
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.TEST_MINIMIZATION,
    },
    // sampling
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.RANDOM_SEED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MAX_DEPTH,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MAX_ACTION_STATEMENTS,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.CONSTANT_POOL_ENABLED,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.EXPLORE_ILLEGAL_VALUES,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.RESAMPLE_GENE_PROBABILITY,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.DELTA_MUTATION_PROBABILITY,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.SAMPLE_EXISTING_VALUE_PROBABILITY,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MULTI_POINT_CROSSOVER_PROBABILITY,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.CROSSOVER_PROBABILITY,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.CONSTANT_POOL_PROBABILITY,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.SAMPLE_FUNCTION_OUTPUT_AS_ARGUMENT,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.STRING_ALPHABET,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.STRING_MAX_LENGTH,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.NUMERIC_MAX_VALUE,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.CONFIGURATION,
    },
    // Timing
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.SEARCH_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.EVALUATIONS,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.ITERATIONS,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.INITIALIZATION_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.PREPROCESS_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.PROCESS_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.POSTPROCESS_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.TARGET_LOAD_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.INSTRUMENTATION_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.TYPE_RESOLVE_TIME,
    },
    // Archive
    {
        type: metric_1.MetricType.SERIES,
        name: SeriesName.ARCHIVE_SIZE,
        seriesUnit: metric_1.SeriesUnit.TOTAL_TIME,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.ARCHIVE_SIZE,
    },
    {
        type: metric_1.MetricType.PROPERTY,
        name: PropertyName.MINIMIZED_ARCHIVE_SIZE,
    },
];
//# sourceMappingURL=Metrics.js.map