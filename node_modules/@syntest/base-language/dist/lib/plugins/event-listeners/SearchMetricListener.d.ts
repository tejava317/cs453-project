import { Metric, MetricManager, SeriesIndex, SeriesUnit } from "@syntest/metric";
import { EventListenerPlugin } from "@syntest/module";
import { BudgetManager, Encoding, ObjectiveFunction, SearchAlgorithm, SearchSubject } from "@syntest/search";
export declare class SearchMetricListener extends EventListenerPlugin {
    protected currentNamespace: string;
    protected _metricManager: MetricManager;
    /**
     * Constructor.
     */
    constructor();
    get metricManager(): MetricManager;
    /**
     * Updates the collector.
     *
     * @param searchAlgorithm The search algorithm used
     * @param budgetManager The budget manager
     * @param terminationManager The termination manager
     */
    recordSeries<E extends Encoding>(searchAlgorithm: SearchAlgorithm<E>, subject: SearchSubject<E>, budgetManager: BudgetManager<E>): void;
    recordCoveredSeries<E extends Encoding>(seriesUnit: SeriesUnit, seriesIndex: SeriesIndex, coveredPaths: number, coveredBranches: number, coveredFunctions: number, coveredLines: number, coveredImplicitBranches: number, covered: number, coveredExceptions: number, coveredObjectives: ObjectiveFunction<E>[], uncoveredObjectives: ObjectiveFunction<E>[]): void;
    recordFinalProperties<T extends Encoding>(searchAlgorithm: SearchAlgorithm<T>): void;
    setupEventListener(metricManager: MetricManager): void;
    getMetrics(): Metric[] | Promise<Metric[]>;
    getOptions(): Map<any, any>;
    getOptionChoices(): string[];
}
//# sourceMappingURL=SearchMetricListener.d.ts.map