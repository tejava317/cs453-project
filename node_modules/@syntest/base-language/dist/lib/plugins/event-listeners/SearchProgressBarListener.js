"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchProgressBarListener = void 0;
const module_1 = require("@syntest/module");
class SearchProgressBarListener extends module_1.EventListenerPlugin {
    constructor(userInterface) {
        super("SearchProgressBarListener", "A listener that creates and updates a progress bar for the search process.");
        this._userInterface = userInterface;
    }
    setupEventListener() {
        process.on("searchStart", (_searchAlgorithm, subject, budgetManager) => {
            this._userInterface.startProgressBars([
                {
                    name: subject.name,
                    value: 0,
                    maxValue: subject.getObjectives().length,
                    meta: `${budgetManager.getBudget()}`,
                },
            ]);
        });
        process.on("searchIterationComplete", (searchAlgorithm, subject, budgetManager) => {
            const originalObjectives = subject.getObjectives();
            this._userInterface.updateProgressBar({
                name: subject.name,
                value: [
                    ...searchAlgorithm.getObjectiveManager().getCoveredObjectives(),
                ]
                    // filter out the exception objectives
                    .filter((coveredObjective) => originalObjectives.find((objective) => objective.getIdentifier() === coveredObjective.getIdentifier())).length,
                maxValue: originalObjectives.length,
                meta: `${budgetManager.getBudget()}`,
            });
        });
        process.on("searchComplete", () => {
            this._userInterface.stopProgressBars();
        });
    }
    getOptions() {
        return new Map();
    }
    getOptionChoices() {
        return [];
    }
}
exports.SearchProgressBarListener = SearchProgressBarListener;
//# sourceMappingURL=SearchProgressBarListener.js.map