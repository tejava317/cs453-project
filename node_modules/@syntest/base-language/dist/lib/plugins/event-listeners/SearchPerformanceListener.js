"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchPerformanceListener = void 0;
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const path = require("node:path");
const logging_1 = require("@syntest/logging");
const module_1 = require("@syntest/module");
class SearchPerformanceListener extends module_1.EventListenerPlugin {
    constructor() {
        super("SearchPerformanceListener", "A listener that outputs the performance of the search algorithm.");
        SearchPerformanceListener.LOGGER = (0, logging_1.getLogger)("SearchPerformanceListener");
    }
    setupEventListener() {
        process.on("searchStart", (searchAlgorithm, _subject, _budgetManager) => {
            const objectives = searchAlgorithm
                .getObjectiveManager()
                .getCurrentObjectives();
            const objectivePerformance = searchAlgorithm.calculateObjectivePerformance([...objectives]);
            SearchPerformanceListener.LOGGER.info("Objective performance:");
            for (const [objective, distance] of objectivePerformance) {
                const objectiveName = objective.getIdentifier().split(path.sep).pop();
                SearchPerformanceListener.LOGGER.info(`${objectiveName}: ${distance} (lowest: ${objective.getLowestDistance()})`);
            }
        });
        process.on("searchIterationComplete", (searchAlgorithm, _subject, _budgetManager) => {
            const objectives = searchAlgorithm
                .getObjectiveManager()
                .getCurrentObjectives();
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call
            const objectivePerformance = searchAlgorithm.calculateObjectivePerformance([...objectives]);
            SearchPerformanceListener.LOGGER.info("Objective performance:");
            for (const [objective, distance] of objectivePerformance) {
                const objectiveName = objective.getIdentifier().split(path.sep).pop();
                SearchPerformanceListener.LOGGER.info(`${objectiveName}: ${distance} (lowest: ${objective.getLowestDistance()}`);
            }
        });
    }
    getOptions() {
        return new Map();
    }
    getOptionChoices() {
        return [];
    }
}
exports.SearchPerformanceListener = SearchPerformanceListener;
//# sourceMappingURL=SearchPerformanceListener.js.map