import { Metric } from "@syntest/metric";
export declare enum SeriesName {
    OBJECTIVE_DISTANCE = "objective-distance",
    BRANCHES_COVERED = "branches-covered",
    STATEMENTS_COVERED = "statements-covered",
    FUNCTIONS_COVERED = "functions-covered",
    PATH_OBJECTIVES_COVERED = "path-objectives-covered",
    BRANCH_OBJECTIVES_COVERED = "branch-objectives-covered",
    EXCEPTION_OBJECTIVES_COVERED = "exception-objectives-covered",
    FUNCTION_OBJECTIVES_COVERED = "function-objectives-covered",
    LINE_OBJECTIVES_COVERED = "line-objectives-covered",
    IMPLICIT_BRANCH_OBJECTIVES_COVERED = "implicit-branch-objectives-covered",
    OBJECTIVES_COVERED = "objectives-covered",
    ARCHIVE_SIZE = "archive-size"
}
export declare enum PropertyName {
    BRANCHES_COVERED = "branches-covered",
    STATEMENTS_COVERED = "statements-covered",
    FUNCTIONS_COVERED = "functions-covered",
    BRANCHES_TOTAL = "branches-total",
    STATEMENTS_TOTAL = "statements-total",
    FUNCTIONS_TOTAL = "functions-total",
    PATH_OBJECTIVES_COVERED = "path-objectives-covered",
    BRANCH_OBJECTIVES_COVERED = "branch-objectives-covered",
    EXCEPTION_OBJECTIVES_COVERED = "exception-objectives-covered",
    FUNCTION_OBJECTIVES_COVERED = "function-objectives-covered",
    LINE_OBJECTIVES_COVERED = "line-objectives-covered",
    IMPLICIT_BRANCH_OBJECTIVES_COVERED = "implicit-branch-objectives-covered",
    OBJECTIVES_COVERED = "objectives-covered",
    PATH_OBJECTIVES_TOTAL = "path-objectives-total",
    BRANCH_OBJECTIVES_TOTAL = "branch-objectives-total",
    EXCEPTION_OBJECTIVES_TOTAL = "exception-objectives-total",
    FUNCTION_OBJECTIVES_TOTAL = "function-objectives-total",
    LINE_OBJECTIVES_TOTAL = "line-objectives-total",
    IMPLICIT_BRANCH_OBJECTIVES_TOTAL = "implicit-branch-objectives-total",
    OBJECTIVES_TOTAL = "objectives-total",
    PRESET = "preset",
    TARGET_ROOT_DIRECTORY = "target-root-directory",
    INCLUDE = "include",
    EXCLUDE = "exclude",
    SEARCH_ALGORITHM = "search-algorithm",
    POPULATION_SIZE = "population-size",
    OBJECTIVE_MANAGER = "objective-manager",
    SECONDARY_OBJECTIVES = "secondary-objectives",
    PROCREATION = "procreation",
    CROSSOVER = "crossover",
    SAMPLER = "sampler",
    TERMINATION_TRIGGERS = "termination-triggers",
    MAX_TOTAL_TIME = "max-total-time",
    MAX_SEARCH_TIME = "max-search-time",
    MAX_EVALUATIONS = "max-evaluations",
    MAX_ITERATIONS = "max-iterations",
    TEST_MINIMIZATION = "test-minimization",
    RANDOM_SEED = "random-seed",
    MAX_DEPTH = "max-depth",
    MAX_ACTION_STATEMENTS = "max-action-statements",
    CONSTANT_POOL_ENABLED = "constant-pool-enabled",
    EXPLORE_ILLEGAL_VALUES = "explore-illegal-values",
    RESAMPLE_GENE_PROBABILITY = "resample-gene-probability",
    DELTA_MUTATION_PROBABILITY = "delta-mutation-probability",
    SAMPLE_EXISTING_VALUE_PROBABILITY = "sample-existing-value-probability",
    MULTI_POINT_CROSSOVER_PROBABILITY = "multi-point-crossover-probability",
    CROSSOVER_PROBABILITY = "crossover-probability",
    CONSTANT_POOL_PROBABILITY = "constant-pool-probability",
    SAMPLE_FUNCTION_OUTPUT_AS_ARGUMENT = "sample-function-output-as-argument",
    STRING_ALPHABET = "string-alphabet",
    STRING_MAX_LENGTH = "string-max-length",
    NUMERIC_MAX_VALUE = "numeric-max-value",
    CONFIGURATION = "configuration",
    TOTAL_TIME = "total-time",
    SEARCH_TIME = "search-time",
    EVALUATIONS = "evaluations",
    ITERATIONS = "iterations",
    INITIALIZATION_TIME = "initialization-time",
    PREPROCESS_TIME = "pre-process-time",
    PROCESS_TIME = "process-time",
    POSTPROCESS_TIME = "post-process-time",
    TARGET_LOAD_TIME = "target-load-time",
    INSTRUMENTATION_TIME = "instrumentation-time",
    TYPE_RESOLVE_TIME = "type-resolve-time",
    ARCHIVE_SIZE = "archive-size",
    MINIMIZED_ARCHIVE_SIZE = "minimized-archive-size"
}
export declare const metrics: Metric[];
//# sourceMappingURL=Metrics.d.ts.map