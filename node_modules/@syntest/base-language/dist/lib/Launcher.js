"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Launcher = void 0;
const Metrics_1 = require("./Metrics");
class Launcher {
    constructor(arguments_, moduleManager, metricManager, storageManager, userInterface) {
        this.arguments_ = arguments_;
        this.moduleManager = moduleManager;
        this.metricManager = metricManager;
        this.storageManager = storageManager;
        this.userInterface = userInterface;
    }
    async run() {
        try {
            this.registerProperties();
            process.emit("initializeStart");
            await this.initialize();
            process.emit("initializeComplete");
            process.emit("preprocessStart");
            await this.preprocess();
            process.emit("preprocessComplete");
            process.emit("processStart");
            await this.process();
            process.emit("processComplete");
            process.emit("postprocessStart");
            await this.postprocess();
            process.emit("postprocessComplete");
            process.emit("exitting");
            await this.exit();
        }
        catch (error) {
            console.log(error);
            console.trace(error);
            await this.exit();
        }
    }
    registerProperties() {
        this.metricManager.recordProperty(Metrics_1.PropertyName.PRESET, `${this.arguments_.preset}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.TARGET_ROOT_DIRECTORY, `${this.arguments_.targetRootDirectory}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.INCLUDE, `[${this.arguments_.targetInclude.join(", ")}]`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.EXCLUDE, `[${this.arguments_.targetExclude.join(", ")}]`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.SEARCH_ALGORITHM, `${this.arguments_.searchAlgorithm}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.POPULATION_SIZE, `${this.arguments_.populationSize}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.OBJECTIVE_MANAGER, `${this.arguments_.objectiveManager}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.SECONDARY_OBJECTIVES, `[${this.arguments_.secondaryObjectives.join(", ")}]`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.PROCREATION, `${this.arguments_.procreation}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.CROSSOVER, `${this.arguments_.crossover}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.SAMPLER, `${this.arguments_.sampler}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.TERMINATION_TRIGGERS, `[${this.arguments_.terminationTriggers.join(", ")}]`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.MAX_TOTAL_TIME, `${this.arguments_.totalTime}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.MAX_SEARCH_TIME, `${this.arguments_.searchTime}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.MAX_EVALUATIONS, `${this.arguments_.evaluations}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.MAX_ITERATIONS, `${this.arguments_.iterations}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.TEST_MINIMIZATION, `${this.arguments_.testMinimization.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.RANDOM_SEED, `${this.arguments_.randomSeed.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.MAX_DEPTH, `${this.arguments_.maxDepth.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.MAX_ACTION_STATEMENTS, `${this.arguments_.maxActionStatements.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.EXPLORE_ILLEGAL_VALUES, `${this.arguments_.exploreIllegalValues.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.DELTA_MUTATION_PROBABILITY, `${this.arguments_.deltaMutationProbability.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.MULTI_POINT_CROSSOVER_PROBABILITY, `${this.arguments_.multiPointCrossoverProbability.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.CROSSOVER_PROBABILITY, `${this.arguments_.crossoverProbability.toString()}`);
        // this.metricManager.recordProperty(
        //   PropertyName.STRING_ALPHABET,
        //   `${this.arguments_.stringAlphabet.toString()}`
        // );
        this.metricManager.recordProperty(Metrics_1.PropertyName.STRING_MAX_LENGTH, `${this.arguments_.stringMaxLength.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.NUMERIC_MAX_VALUE, `${this.arguments_.numericMaxValue.toString()}`);
        this.metricManager.recordProperty(Metrics_1.PropertyName.CONFIGURATION, `${this.arguments_.configuration.toString()}`);
    }
}
exports.Launcher = Launcher;
//# sourceMappingURL=Launcher.js.map