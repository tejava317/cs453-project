import { NodePath } from "@babel/core";
import { Scope as BabelScope, TraverseOptions } from "@babel/traverse";
import * as t from "@babel/types";
import { Logger } from "@syntest/logging";
export declare const MemberSeparator = " <-> ";
export declare class AbstractSyntaxTreeVisitor implements TraverseOptions {
    protected static LOGGER: Logger;
    protected _filePath: string;
    protected _syntaxForgiving: boolean;
    protected _scopeIdOffset: number;
    protected _thisScopes: Set<string>;
    protected _thisScopeStack: number[];
    protected _thisScopeStackNames: string[];
    get filePath(): string;
    get syntaxForgiving(): boolean;
    get scopeIdOffset(): number;
    constructor(filePath: string, syntaxForgiving: boolean);
    protected _getUidFromScope(scope: BabelScope): number;
    _getNodeId(path: NodePath<t.Node> | t.Node): string;
    _getBindingId(path: NodePath<t.Node>): string;
    _getThisParent(path: NodePath<t.Node>): NodePath<t.FunctionDeclaration | t.FunctionExpression | t.ObjectExpression | t.Class | t.Program>;
    enter: (path: NodePath<t.Node>) => void;
    exit: (path: NodePath<t.Node>) => void;
    Program: (path: NodePath<t.Program>) => void;
    Scopable: {
        enter: (path: NodePath<t.Scopable>) => void;
        exit: (path: NodePath<t.Scopable>) => void;
    };
    protected _getCurrentThisScopeId(): number;
}
//# sourceMappingURL=AbstractSyntaxTreeVisitor.d.ts.map