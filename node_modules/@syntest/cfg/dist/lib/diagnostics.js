"use strict";
/*
 * Copyright 2023-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeNotFoundInMapping = exports.duplicateNodeInMappping = exports.duplicateNodeId = exports.exactlyOneNodeShouldBeRemoved = exports.exactlyOneEdgeShouldBeRemoved = exports.cannotMergeEntryAndExit = exports.notDirectlyConnected = exports.tooManyOutgoing = exports.tooManyIncoming = exports.shouldNeverHappen = void 0;
const shouldNeverHappen = (bugLocation) => `This should never happen.\nThere is likely a bug in the ${bugLocation}.`;
exports.shouldNeverHappen = shouldNeverHappen;
const tooManyIncoming = (node) => `Edge Contraction error\nCannot merge nodes.\nNode ${node} has more than one incoming edge.`;
exports.tooManyIncoming = tooManyIncoming;
const tooManyOutgoing = (node) => `Edge Contraction error\nCannot merge nodes.\nNode ${node} has more than one outgoing edge.`;
exports.tooManyOutgoing = tooManyOutgoing;
const notDirectlyConnected = (node1, node2) => `Edge Contraction error\nCannot merge nodes.\nNodes ${node1} and ${node2} are not directly connected.`;
exports.notDirectlyConnected = notDirectlyConnected;
const cannotMergeEntryAndExit = () => `Edge Contraction error\nCannot merge entry and exit nodes.`;
exports.cannotMergeEntryAndExit = cannotMergeEntryAndExit;
const exactlyOneEdgeShouldBeRemoved = (node1, node2, amount) => `Edge Contraction error\nExactly one edge should be removed when merging nodes ${node1} and ${node2}.\nRemoved: ${amount}.`;
exports.exactlyOneEdgeShouldBeRemoved = exactlyOneEdgeShouldBeRemoved;
const exactlyOneNodeShouldBeRemoved = (node1, node2, amount) => `Edge Contraction error\nExactly one node should be removed when merging nodes ${node1} and ${node2}.\nRemoved: ${amount}.`;
exports.exactlyOneNodeShouldBeRemoved = exactlyOneNodeShouldBeRemoved;
const duplicateNodeId = (id) => `Control Flow Graph error\nDuplicate node id found.\nNode id: ${id}.`;
exports.duplicateNodeId = duplicateNodeId;
const duplicateNodeInMappping = () => `Control Flow Graph error\nDuplicate node found in mapping.`;
exports.duplicateNodeInMappping = duplicateNodeInMappping;
const nodeNotFoundInMapping = (node) => `Control Flow Graph error\nNode ${node} not found in mapping.`;
exports.nodeNotFoundInMapping = nodeNotFoundInMapping;
//# sourceMappingURL=diagnostics.js.map