#!/usr/bin/env node
"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("node:path");
const cli_graphics_1 = require("@syntest/cli-graphics");
const logging_1 = require("@syntest/logging");
const metric_1 = require("@syntest/metric");
const module_1 = require("@syntest/module");
const prng_1 = require("@syntest/prng");
const storage_1 = require("@syntest/storage");
const uuid = require("short-uuid");
const yargHelper = require("yargs/helpers");
async function main() {
    const flowId = `FID-${Date.now()}-${uuid.generate()}`;
    // Setup user interface
    const userInterface = new cli_graphics_1.UserInterface();
    userInterface.printTitle("SynTest");
    userInterface.printSuccess("");
    userInterface.printSuccess(flowId);
    // Remove binary call from args
    const arguments_ = yargHelper.hideBin(process.argv);
    /**
     * Configure base usage
     *
     * We disable help and version here because, we don't want the help command to be triggered.
     * When we did not configure the commands and options from the added modules yet.
     */
    let yargs = module_1.Configuration.configureUsage().help(false).version(false);
    // Configure general options
    yargs = module_1.Configuration.configureOptions(yargs);
    yargs = storage_1.Configuration.configureOptions(yargs);
    yargs = logging_1.Configuration.configureOptions(yargs);
    yargs = metric_1.Configuration.configureOptions(yargs);
    yargs = prng_1.Configuration.configureOptions(yargs);
    // Parse the arguments and config using only the base options
    const baseArguments = yargs
        .wrap(yargs.terminalWidth())
        .env("SYNTEST")
        .parseSync(arguments_);
    const seed = baseArguments.randomSeed || (0, prng_1.getSeed)();
    (0, prng_1.initializePseudoRandomNumberGenerator)(seed);
    // Setup logger
    (0, logging_1.setupLogger)(path.join(baseArguments.syntestDirectory, flowId, baseArguments.logDirectory), baseArguments.fileLogLevel, baseArguments.consoleLogLevel);
    const LOGGER = (0, logging_1.getLogger)("cli");
    LOGGER.info(`Starting Flow with id: ${flowId}`);
    // Setup storage manager
    const storageManager = new storage_1.StorageManager();
    // Setup metric manager
    const metricManager = new metric_1.MetricManager("global");
    // Setup module manager
    const moduleManager = new module_1.ModuleManager(metricManager, storageManager, userInterface);
    // Enable help on fail
    yargs = yargs.showHelpOnFail(true);
    // Import defined modules
    const modules = baseArguments.modules;
    LOGGER.info("Loading standard modules...");
    await moduleManager.loadModule("@syntest/init", "@syntest/init");
    LOGGER.info(`Loading modules... [${modules.join(", ")}]`);
    await moduleManager.loadModules(modules);
    yargs = moduleManager.configureModules(yargs, baseArguments.preset);
    moduleManager.printModuleVersionTable();
    const versions = [...moduleManager.modules.values()]
        .map((module) => `${module.name} (${module.version})`)
        .join("\n");
    // Execute program
    LOGGER.info("Executing program...");
    await yargs
        .wrap(yargs.terminalWidth())
        .help(true)
        .version(versions)
        .showHidden(false)
        .demandCommand()
        .env("SYNTEST")
        .middleware(async (argv) => {
        argv.fid = flowId;
        argv.randomSeed = seed;
        // Set the arguments in the module manager
        storageManager.args = argv;
        // Set the arguments in the module manager
        moduleManager.args = argv;
        // Set the metrics on the metric manager
        metricManager.metrics = await moduleManager.getMetrics();
        metricManager.setOutputMetrics(argv.outputMetrics);
        // process.setMaxListeners()
        // Register all listener plugins
        for (const plugin of moduleManager
            .getPluginsOfType(module_1.PluginType.EVENT_LISTENER)
            .values()) {
            await plugin.setupEventListener(metricManager);
        }
        // Prepare modules
        LOGGER.info("Preparing modules...");
        await moduleManager.prepare();
        LOGGER.info("Modules prepared!");
        const argumentsValues = (0, module_1.extractArgumentValues)(argv, moduleManager);
        storageManager.store([], ".syntest.json", JSON.stringify(argumentsValues, undefined, 2));
    })
        .parse(arguments_);
}
// eslint-disable-next-line unicorn/prefer-top-level-await
void main();
//# sourceMappingURL=bin.js.map