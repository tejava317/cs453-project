import * as t from "@babel/types";
import { RootContext as CoreRootContext } from "@syntest/analysis";
import { Logger } from "@syntest/logging";
import { AbstractSyntaxTreeFactory } from "./ast/AbstractSyntaxTreeFactory";
import { ControlFlowGraphFactory } from "./cfg/ControlFlowGraphFactory";
import { ConstantPoolFactory } from "./constant/ConstantPoolFactory";
import { ConstantPoolManager } from "./constant/ConstantPoolManager";
import { DependencyFactory } from "./dependency/DependencyFactory";
import { Export } from "./target/export/Export";
import { ExportFactory } from "./target/export/ExportFactory";
import { TargetFactory } from "./target/TargetFactory";
import { Element } from "./type/discovery/element/Element";
import { DiscoveredObjectType } from "./type/discovery/object/DiscoveredType";
import { Relation } from "./type/discovery/relation/Relation";
import { TypeExtractor } from "./type/discovery/TypeExtractor";
import { TypeModel } from "./type/resolving/TypeModel";
import { TypeModelFactory } from "./type/resolving/TypeModelFactory";
import { TypePool } from "./type/resolving/TypePool";
export declare class RootContext extends CoreRootContext<t.Node> {
    protected static LOGGER: Logger;
    protected _exportFactory: ExportFactory;
    protected _typeExtractor: TypeExtractor;
    protected _typeResolver: TypeModelFactory;
    protected _constantPoolFactory: ConstantPoolFactory;
    protected _targetFiles: Set<string>;
    protected _analysisFiles: Set<string>;
    protected _elementMap: Map<string, Map<string, Element>>;
    protected _relationMap: Map<string, Map<string, Relation>>;
    protected _objectMap: Map<string, Map<string, DiscoveredObjectType>>;
    protected _typeModel: TypeModel;
    protected _typePool: TypePool;
    protected _exportMap: Map<string, Export[]>;
    constructor(rootPath: string, targetFiles: Set<string>, analysisFiles: Set<string>, abstractSyntaxTreeFactory: AbstractSyntaxTreeFactory, controlFlowGraphFactory: ControlFlowGraphFactory, targetFactory: TargetFactory, dependencyFactory: DependencyFactory, exportFactory: ExportFactory, typeExtractor: TypeExtractor, typeResolver: TypeModelFactory, constantPoolFactory: ConstantPoolFactory);
    get rootPath(): string;
    getSource(filePath: string): string;
    getExports(filePath: string): Export[];
    getAllExports(): Map<string, Export[]>;
    getElements(filepath: string): Map<string, Element>;
    getAllElements(): Map<string, Map<string, Element>>;
    getRelations(filepath: string): Map<string, Relation>;
    getAllRelations(): Map<string, Map<string, Relation>>;
    getObjectTypes(filepath: string): Map<string, DiscoveredObjectType>;
    getAllObjectTypes(): Map<string, Map<string, DiscoveredObjectType>>;
    resolveTypes(): void;
    getTypeModel(): TypeModel;
    getTypePool(): TypePool;
    private _getContextConstantPool;
    getConstantPoolManager(filepath: string): ConstantPoolManager;
}
//# sourceMappingURL=RootContext.d.ts.map