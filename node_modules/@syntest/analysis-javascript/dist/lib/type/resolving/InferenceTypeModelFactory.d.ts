import { Element } from "../discovery/element/Element";
import { Relation } from "../discovery/relation/Relation";
import { TypeModel } from "./TypeModel";
import { TypeModelFactory } from "./TypeModelFactory";
export declare class InferenceTypeModelFactory extends TypeModelFactory {
    private _typeModel;
    private _idToBindingIdMap;
    constructor();
    resolveTypes(elementMaps: Map<string, Map<string, Element>>, relationMaps: Map<string, Map<string, Relation>>): TypeModel;
    createNewTypeProbability(id: string, bindingId: string): void;
    createLiteralTypeMaps(elementMap: Map<string, Element>): void;
    createIdentifierTypeMaps(elementMap: Map<string, Element>): void;
    createRelationTypeMaps(elementMap: Map<string, Element>, relationMap: Map<string, Relation>): void;
    inferRelationTypes(elementMap: Map<string, Element>, relationMap: Map<string, Relation>): void;
    resolveRelation(elementMap: Map<string, Element>, relationMap: Map<string, Relation>, relation: Relation): void;
    private _return;
    private _call;
    private _objectProperty;
    private _objectMethod;
    private _classProperty;
    private _classMethod;
    private _arrayPattern;
    private _for;
    private _forIn;
    private _forOf;
    private _switch;
    private _propertyAccessor;
    private _assignment;
    private _specialAssignment;
    private _additionAssignment;
    private _logicalAssignment;
    private addFunctionParameters;
}
//# sourceMappingURL=InferenceTypeModelFactory.d.ts.map