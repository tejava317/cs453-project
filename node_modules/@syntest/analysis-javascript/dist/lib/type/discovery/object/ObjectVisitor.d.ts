import { NodePath } from "@babel/core";
import * as t from "@babel/types";
import { AbstractSyntaxTreeVisitor } from "@syntest/ast-visitor-javascript";
import { DiscoveredType } from "./DiscoveredType";
export declare class ObjectVisitor extends AbstractSyntaxTreeVisitor {
    private _objectTypeMap;
    private _objectStack;
    get objectTypeMap(): Map<string, DiscoveredType>;
    constructor(filePath: string, syntaxForgiving: boolean);
    private _getCurrentObject;
    private _removeFromStack;
    private _getPropertyName;
    ClassExpression: (path: NodePath<t.ClassExpression>) => void;
    ClassDeclaration: (path: NodePath<t.ClassDeclaration>) => void;
    ClassMethod: (path: NodePath<t.ClassMethod>) => void;
    ClassPrivateMethod: (path: NodePath<t.ClassPrivateMethod>) => void;
    ClassProperty: (path: NodePath<t.ClassProperty>) => void;
    ClassPrivateProperty: (path: NodePath<t.ClassPrivateProperty>) => void;
    ObjectExpression: (path: NodePath<t.ObjectExpression>) => void;
    ObjectPattern: (path: NodePath<t.ObjectPattern>) => void;
    ObjectMethod: (path: NodePath<t.ObjectMethod>) => void;
    ObjectProperty: (path: NodePath<t.ObjectProperty>) => void;
    FunctionDeclaration: (path: NodePath<t.FunctionDeclaration>) => void;
    FunctionExpression: (path: NodePath<t.FunctionExpression>) => void;
    ArrowFunctionExpression: (path: NodePath<t.ArrowFunctionExpression>) => void;
    MemberExpression: (path: NodePath<t.MemberExpression>) => void;
}
//# sourceMappingURL=ObjectVisitor.d.ts.map