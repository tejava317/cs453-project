export type Element = Identifier | Literal;
export interface Identifier {
    id: string;
    bindingId: string;
    filePath: string;
    location: {
        startIndex: number;
        endIndex: number;
    };
    type: ElementType.Identifier;
    name: string;
}
export interface Literal {
    id: string;
    bindingId: string;
    filePath: string;
    location: {
        startIndex: number;
        endIndex: number;
    };
    type: ElementType.StringLiteral | ElementType.NumericalLiteral | ElementType.NullLiteral | ElementType.BooleanLiteral | ElementType.RegExpLiteral | ElementType.TemplateLiteral | ElementType.BigIntLiteral | ElementType.DecimalLiteral | ElementType.Undefined;
    value: string;
}
export declare enum ElementType {
    StringLiteral = "stringLiteral",
    NumericalLiteral = "numericalLiteral",
    NullLiteral = "nullLiteral",
    BooleanLiteral = "booleanLiteral",
    RegExpLiteral = "regExpLiteral",
    TemplateLiteral = "templateLiteral",
    BigIntLiteral = "bigIntLiteral",
    DecimalLiteral = "decimalLiteral",
    Undefined = "undefined",
    Identifier = "identifier"
}
//# sourceMappingURL=Element.d.ts.map