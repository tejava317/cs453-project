export interface Relation {
    id: string;
    type: RelationType;
    involved: string[];
    computed?: boolean;
}
export declare function getRelationName(type: RelationType): string;
export declare enum RelationType {
    Return = "L->R",
    Call = "L(R)",
    PrivateName = "#L",
    ObjectProperty = "{L:R}",
    ObjectMethod = "{L(R)}",
    ClassProperty = "L{K:V}",
    StaticClassProperty = "L{static K:V}",
    ClassMethod = "L{R()}",
    AsyncClassMethod = "L{async R()}",
    StaticClassMethod = "L{static R()}",
    StaticAsyncClassMethod = "L{static async R()}",
    ClassConstructor = "L{constructor(R)}",
    ClassGetter = "L{get R}",
    ClassSetter = "L{set R}",
    ArrayPattern = "[L]",
    ObjectPattern = "{L}",
    RestElement = "...R",
    While = "while(L)",
    If = "if(L)",
    For = "for(L)",
    ForIn = "for(L in R)",
    ForOf = "for(L of R)",
    Switch = "switch(L) case R",
    This = "this",
    ArrayInitializer = "[L]",
    ObjectInitializer = "{L}",
    ClassDefinition = "class L",
    FunctionDefinition = "function L(R)",
    FunctionStarDefinition = "function* L(R)",
    AsyncFunctionDefinition = "async function L(R)",
    AsyncFunctionStarDefinition = "async function* L(R)",
    TemplateLiteral = "`L`",
    Sequence = "(L,R)",
    PropertyAccessor = "L.R",
    OptionalPropertyAccessor = "L?.R",
    New = "new L()",
    PlusPlusPostFix = "L++",
    MinusMinusPostFix = "L--",
    PlusPlusPrefix = "++L",
    MinusMinusPrefix = "--L",
    Delete = "delete L",
    Void = "void L",
    TypeOf = "typeof L",
    PlusUnary = "+L",
    MinusUnary = "-L",
    BitwiseNotUnary = "~L",
    LogicalNotUnary = "!L",
    Await = "await L",
    Addition = "L+R",
    Subtraction = "L-R",
    Division = "L/R",
    Multiplication = "L*R",
    Remainder = "L%R",
    Exponentiation = "L**R",
    Less = "L<R",
    Greater = "L>R",
    LessOrEqual = "L<=R",
    GreaterOrEqual = "L>=R",
    InstanceOf = "L instanceof R",
    In = "L in R",
    Equality = "L==R",
    InEquality = "L!=R",
    StrictEquality = "L===R",
    StrictInequality = "L!==R",
    BitwiseLeftShift = "L<<R",
    BitwiseRightShift = "L>>R",
    BitwiseUnsignedRightShift = "L>>>R",
    BitwiseAnd = "L&R",
    BitwiseOr = "L|R",
    BitwiseXor = "L^R",
    LogicalAnd = "L&&R",
    LogicalOr = "L||R",
    NullishCoalescing = "L??R",
    Conditional = "C?L:R",
    Assignment = "L=R",
    MultiplicationAssignment = "L*=R",
    ExponentiationAssignment = "L**=R",
    DivisionAssignment = "L/=R",
    RemainderAssigment = "L%=R",
    AdditionAssignment = "L+=R",
    SubtractionAssignment = "L-=R",
    LeftShiftAssignment = "L<<=R",
    RightShiftAssignment = "L>>=R",
    UnSignedRightShiftAssignment = "L>>>=R",
    BitwiseAndAssignment = "L&=R",
    BitwiseXorAssignment = "L^=R",
    BitwiseOrAssignment = "L|=R",
    LogicalAndAssignment = "L&&=R",
    LogicalOrAssignment = "L||=R",
    LogicalNullishAssignment = "L??=R",
    Yield = "yield L",
    YieldStar = "yield* L",
    Spread = "...L",
    Comma = "L,R"
}
export declare function getRelationType(type: string, operator: string, prefix?: boolean): RelationType;
//# sourceMappingURL=Relation.d.ts.map