import { UserInterface } from "@syntest/cli-graphics";
import { Logger } from "@syntest/logging";
import { Metric, MetricManager } from "@syntest/metric";
import { StorageManager } from "@syntest/storage";
import Yargs = require("yargs");
import { Module } from "./extension/Module";
import { Plugin } from "./extension/Plugin";
import { Preset } from "./extension/Preset";
import { Tool } from "./extension/Tool";
export declare class ModuleManager {
    protected static LOGGER: Logger;
    private _metricManager;
    private _storageManager;
    private _userInterface;
    private _args;
    private _modules;
    private _tools;
    private _plugins;
    private _presets;
    private _toolsOfModule;
    private _pluginsOfModule;
    private _presetsOfModule;
    constructor(metricManager: MetricManager, storageManager: StorageManager, userInterface: UserInterface);
    get args(): Yargs.ArgumentsCamelCase;
    set args(arguments_: Yargs.ArgumentsCamelCase);
    get modules(): Map<string, Module>;
    get tools(): Map<string, Tool>;
    get plugins(): Map<string, Map<string, Plugin>>;
    get presets(): Map<string, Preset>;
    get toolsOfModule(): Map<string, Tool[]>;
    get pluginsOfModule(): Map<string, Plugin[]>;
    get presetsOfModule(): Map<string, Preset[]>;
    getPlugin(type: string, name: string): Plugin;
    getPluginsOfType(type: string): Map<string, Plugin>;
    getMetrics(): Promise<Metric[]>;
    prepare(): Promise<void>;
    cleanup(): Promise<void>;
    getModulePath(module: string): string;
    loadModule(moduleId: string, modulePath: string): Promise<void>;
    loadModules(modulesIds: string[]): Promise<void>;
    registerPreset(module: Module, preset: Preset): void;
    registerTool(module: Module, tool: Tool): void;
    registerPlugin(module: Module, plugin: Plugin): void;
    configureModules(yargs: Yargs.Argv, presetChoice: string): Yargs.Argv<{}>;
    printModuleVersionTable(): void;
}
//# sourceMappingURL=ModuleManager.d.ts.map