"use strict";
/*
 * Copyright 2023-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.singletonAlreadySet = exports.singletonNotSet = exports.presetNotFound = exports.presetAlreadyLoaded = exports.cannotAddChoicesToOptionWithoutChoices = exports.toolAlreadyLoaded = exports.pluginAlreadyLoaded = exports.pluginRequiresOptions = exports.pluginNotFound = exports.pluginsNotFound = exports.moduleAlreadyLoaded = exports.moduleCannotBeLoaded = exports.moduleNotCorrectlyImplemented = exports.moduleNotInstalled = exports.modulePathNotFound = void 0;
/**
 * This file is meant to provide consistent error messages throughout the tool.
 */
// Modules
const modulePathNotFound = (path) => `Could not load module\nFilepath is invalid\nPath: ${path}`;
exports.modulePathNotFound = modulePathNotFound;
const moduleNotInstalled = (module) => `Could not load module\nModule not installed globally or locally\nModule: ${module}`;
exports.moduleNotInstalled = moduleNotInstalled;
const moduleNotCorrectlyImplemented = (property, module) => `Could not load module\nModule not correctly implemented\nMissing '${property}' property\nModule: ${module}`;
exports.moduleNotCorrectlyImplemented = moduleNotCorrectlyImplemented;
const moduleCannotBeLoaded = (path) => `Could not load module\nReason unknown\nModule: ${path}`;
exports.moduleCannotBeLoaded = moduleCannotBeLoaded;
const moduleAlreadyLoaded = (name, module) => `Could not load module\nModule with name '${name}' is already loaded\nModule: ${module}`;
exports.moduleAlreadyLoaded = moduleAlreadyLoaded;
// Plugins
const pluginsNotFound = (type) => `No plugins of type: '${type}' found in moduleManager.`;
exports.pluginsNotFound = pluginsNotFound;
const pluginNotFound = (name, type) => `${type} plugin not found\nSpecified ${type} plugin: '${name}' not found in moduleManager.`;
exports.pluginNotFound = pluginNotFound;
const pluginRequiresOptions = (pluginName, option) => `${pluginName} plugin requires '${option}' option`;
exports.pluginRequiresOptions = pluginRequiresOptions;
const pluginAlreadyLoaded = (name, type) => `Could not load plugin\nPlugin with name '${name}' is already loaded as a ${type.toLowerCase()} plugin.`;
exports.pluginAlreadyLoaded = pluginAlreadyLoaded;
// Tools
const toolAlreadyLoaded = (name) => `Could not load tool\nTool with name '${name}' is already loaded.`;
exports.toolAlreadyLoaded = toolAlreadyLoaded;
const cannotAddChoicesToOptionWithoutChoices = (option, plugin) => `Could not add choices to option.\nOption '${option}' does not have choices defined.\nPlugin '${plugin}' tries to add choices to option '${option}'.`;
exports.cannotAddChoicesToOptionWithoutChoices = cannotAddChoicesToOptionWithoutChoices;
// Presets
const presetAlreadyLoaded = (name) => `Could not load preset\nPreset with name '${name}' is already loaded.`;
exports.presetAlreadyLoaded = presetAlreadyLoaded;
const presetNotFound = (name) => `Could not load preset\nPreset with name '${name}' not found.`;
exports.presetNotFound = presetNotFound;
// Singletons
const singletonNotSet = (name) => `The ${name} singleton has not been set yet!`;
exports.singletonNotSet = singletonNotSet;
const singletonAlreadySet = (name) => `The ${name} singleton has already been set!`;
exports.singletonAlreadySet = singletonAlreadySet;
//# sourceMappingURL=diagnostics.js.map