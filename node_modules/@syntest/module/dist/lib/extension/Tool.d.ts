import { Metric } from "@syntest/metric";
import Yargs = require("yargs");
import { Command } from "./Command";
import { Extension } from "./Extension";
import { Plugin } from "./Plugin";
export declare class Tool extends Extension implements Yargs.CommandModule {
    labels: string[];
    command: Readonly<string>;
    commands: Command[];
    toolOptions: Map<string, Yargs.Options>;
    handler: (arguments_: Yargs.ArgumentsCamelCase) => void | Promise<void>;
    describe: string;
    constructor(name: string, labels: string[], describe: string, commands: Command[], toolOptions: Map<string, Yargs.Options>, handler?: (arguments_: Yargs.ArgumentsCamelCase) => void | Promise<void>);
    /**
     * These two functions are separated because we need to be able to add choices to options that are added by plugins.
     * If the two functions are combined, the choices will be added to the original options, not the options added by plugins.
     */
    addPluginOptions(plugins: Plugin[]): void;
    addPluginOptionChoices(plugins: Plugin[]): void;
    protected _addCommandOptionChoices(plugin: Plugin): void;
    builder: (yargs: Yargs.Argv) => Yargs.Argv<{}>;
}
export interface Tool {
    /**
     * Should return a list of metrics that are stored by this tool
     */
    getMetrics?(): Promise<Metric[]> | Metric[];
}
//# sourceMappingURL=Tool.d.ts.map