import { Metric } from "@syntest/metric";
import Yargs = require("yargs");
import { Extension } from "./Extension";
export declare abstract class Plugin extends Extension {
    type: Readonly<string>;
    describe: Readonly<string>;
    constructor(type: string, name: string, describe: string);
    /**
     *
     * @param tool the tool the plugin provides options for
     * @param command the command the tool provides options for
     * Should return a map of command -> yargsConfig
     */
    abstract getOptions(tool: string, labels: string[], command?: string | undefined): Map<string, Yargs.Options>;
    /**
     *
     * @param tool the tool the plugin provides additional choices for
     * @param option the option the plugin provides additional choices for
     */
    abstract getOptionChoices(option: string, tool: string, labels: string[], command?: string | undefined): string[];
}
/**
 * We have defined both an abstract class and interface called Plugin here.
 * This is called 'merging' it allows an abstract class to have optional methods.
 */
export interface Plugin {
    /**
     * Should return a list of metrics that are stored by this plugin
     */
    getMetrics?(): Promise<Metric[]> | Metric[];
}
//# sourceMappingURL=Plugin.d.ts.map