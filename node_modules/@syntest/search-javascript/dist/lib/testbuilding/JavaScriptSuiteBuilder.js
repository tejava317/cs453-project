"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaScriptSuiteBuilder = void 0;
class JavaScriptSuiteBuilder {
    constructor(storageManager, decoder, runner) {
        this.storageManager = storageManager;
        this.decoder = decoder;
        this.runner = runner;
    }
    async runSuite(archive, sourceDirectory, testDirectory, gatherAssertionData, compact, final = false) {
        const paths = [];
        // write the test cases with logs to know what to assert
        let totalAmount = 0;
        if (compact) {
            for (const key of archive.keys()) {
                totalAmount += archive.get(key).length;
                const decodedTest = this.decoder.decode(archive.get(key), `${key}`, gatherAssertionData, sourceDirectory);
                const testPath = this.storageManager.store([testDirectory], `test-${key}.spec.js`, decodedTest, !final);
                paths.push(testPath);
            }
        }
        else {
            for (const key of archive.keys()) {
                totalAmount += archive.get(key).length;
                for (const testCase of archive.get(key)) {
                    const decodedTest = this.decoder.decode(testCase, "", gatherAssertionData, sourceDirectory);
                    const testPath = this.storageManager.store([testDirectory], `test${key}${testCase.id}.spec.js`, decodedTest, !final);
                    paths.push(testPath);
                }
            }
        }
        if (final) {
            // eslint-disable-next-line unicorn/no-null
            return null;
        }
        const { stats, instrumentationData, assertionData } = await this.runner.run(paths, totalAmount * 2);
        if (assertionData) {
            // put assertion data on testCases
            for (const [id, data] of Object.entries(assertionData)) {
                const testCase = [...archive.values()].flat().find((x) => x.id === id);
                if (!testCase) {
                    throw new Error("invalid id");
                }
                testCase.assertionData = data;
            }
        }
        // TODO use the results of the tests to show some statistics
        return { stats, instrumentationData };
    }
    reduceArchive(archive) {
        const reducedArchive = new Map();
        for (const objective of archive.getObjectives()) {
            const targetName = objective
                .getSubject()
                .name.split("/")
                .pop()
                .split(".")[0];
            if (!reducedArchive.has(targetName)) {
                reducedArchive.set(targetName, []);
            }
            if (reducedArchive.get(targetName).includes(archive.getEncoding(objective))) {
                // skip duplicate individuals (i.e. individuals which cover multiple objectives
                continue;
            }
            reducedArchive.get(targetName).push(archive.getEncoding(objective));
        }
        return reducedArchive;
    }
}
exports.JavaScriptSuiteBuilder = JavaScriptSuiteBuilder;
//# sourceMappingURL=JavaScriptSuiteBuilder.js.map