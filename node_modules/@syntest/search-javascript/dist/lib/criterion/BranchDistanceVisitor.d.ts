import { NodePath } from "@babel/core";
import * as t from "@babel/types";
import { AbstractSyntaxTreeVisitor } from "@syntest/ast-visitor-javascript";
import { Logger } from "@syntest/logging";
export declare class BranchDistanceVisitor extends AbstractSyntaxTreeVisitor {
    protected static LOGGER: Logger;
    protected _stringAlphabet: string;
    private _K;
    private _variables;
    private _inverted;
    private _valueMap;
    private _isDistanceMap;
    constructor(syntaxForgiving: boolean, stringAlphabet: string, variables: Record<string, unknown>, inverted: boolean);
    _getDistance(condition: string): number;
    Statement: (path: NodePath<t.Statement>) => void;
    CallExpression: (path: NodePath<t.CallExpression>) => void;
    Literal: (path: NodePath<t.Literal>) => void;
    UpdateExpression: (path: NodePath<t.UpdateExpression>) => void;
    UnaryExpression: (path: NodePath<t.UnaryExpression>) => void;
    BinaryExpression: (path: NodePath<t.BinaryExpression>) => void;
    LogicalExpression: (path: NodePath<t.LogicalExpression>) => void;
    private minimum;
    _realCodedEditDistance(s: string, t: string): number;
    protected _editDistDP(string1: string, string2: string): undefined;
    /**
     * Based on doi:10.1109/icstw.2011.100
     *
     * @param x
     * @returns
     */
    private _normalize;
}
//# sourceMappingURL=BranchDistanceVisitor.d.ts.map