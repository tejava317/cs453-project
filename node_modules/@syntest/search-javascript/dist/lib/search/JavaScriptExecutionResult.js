"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Javascript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaScriptExecutionResult = exports.JavaScriptExecutionStatus = void 0;
var JavaScriptExecutionStatus;
(function (JavaScriptExecutionStatus) {
    JavaScriptExecutionStatus[JavaScriptExecutionStatus["PASSED"] = 0] = "PASSED";
    JavaScriptExecutionStatus[JavaScriptExecutionStatus["FAILED"] = 1] = "FAILED";
    JavaScriptExecutionStatus[JavaScriptExecutionStatus["TIMED_OUT"] = 2] = "TIMED_OUT";
    JavaScriptExecutionStatus[JavaScriptExecutionStatus["MEMORY_OVERFLOW"] = 3] = "MEMORY_OVERFLOW";
    JavaScriptExecutionStatus[JavaScriptExecutionStatus["INFINITE_LOOP"] = 4] = "INFINITE_LOOP";
})(JavaScriptExecutionStatus = exports.JavaScriptExecutionStatus || (exports.JavaScriptExecutionStatus = {}));
/**
 * JavaScript specific implementation of the execution results.
 *
 * @author Mitchell Olsthoorn
 */
class JavaScriptExecutionResult {
    /**
     * Constructor.
     *
     * @param status The status of the execution
     * @param traces The traces of the execution
     * @param duration The duration of the execution
     * @param exception The exception of the execution
     */
    constructor(status, traces, duration, error) {
        this._status = status;
        this._traces = traces;
        this._duration = duration;
        this._error = error;
    }
    /**
     * @inheritDoc
     */
    coversId(id) {
        if (this._status === JavaScriptExecutionStatus.INFINITE_LOOP ||
            this._status === JavaScriptExecutionStatus.MEMORY_OVERFLOW) {
            return false;
        }
        const trace = this._traces.find((trace) => trace.id === id);
        if (!trace) {
            if (id.startsWith("placeholder")) {
                // TODO maybe this already fixed?
                // TODO stupit hack because the placeholder nodes we add in the cfg are not being registred by the instrumentation
                // should fix
                return false;
            }
            throw new Error(`Could not find a matching trace for the given id: ${id}`);
        }
        return trace.hits > 0;
    }
    /**
     * @deprecated
     */
    coversLine(line) {
        for (const trace of this._traces) {
            if ((trace.type === "statement" ||
                trace.type === "function" ||
                trace.type === "branch") && // this line is needed for branches with no control dependent statements
                trace.location.start.line === line &&
                trace.hits > 0)
                return true;
        }
        return false;
    }
    /**
     * @inheritDoc
     */
    getDuration() {
        return this._duration;
    }
    /**
     * @inheritDoc
     */
    getError() {
        return this._error;
    }
    /**
     * @inheritDoc
     */
    getTraces() {
        return this._traces;
    }
    /**
     * @inheritDoc
     */
    hasError() {
        return this._error !== null && this._error !== undefined;
    }
    /**
     * @inheritDoc
     */
    hasPassed() {
        return this._status === JavaScriptExecutionStatus.PASSED;
    }
    /**
     * @inheritDoc
     */
    hasTimedOut() {
        return this._status === JavaScriptExecutionStatus.TIMED_OUT;
    }
}
exports.JavaScriptExecutionResult = JavaScriptExecutionResult;
//# sourceMappingURL=JavaScriptExecutionResult.js.map