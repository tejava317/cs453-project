import { Crossover } from "@syntest/search";
import { JavaScriptTestCase } from "../../testcase/JavaScriptTestCase";
import { ActionStatement } from "../../testcase/statements/action/ActionStatement";
import { Statement } from "../../testcase/statements/Statement";
type SwapStatement = {
    parent: Statement;
    childIndex: number;
    child: Statement;
};
/**
 * Creates 2 children which are each other's complement with respect to their parents.
 * i.e. given parents 000000 and 111111 a possible pair of children would be 001111 and 110000.
 * However, it is not as simple because the actual mutation works with trees.
 *
 * @param parentA the first parent individual
 * @param parentB the second parent individual
 *
 * @return a tuple of 2 children
 *
 */
export declare class TreeCrossover extends Crossover<JavaScriptTestCase> {
    crossOver(parents: JavaScriptTestCase[]): JavaScriptTestCase[];
    protected convertToSwapStatements(roots: ActionStatement[]): SwapStatement[];
}
export {};
//# sourceMappingURL=TreeCrossover.d.ts.map