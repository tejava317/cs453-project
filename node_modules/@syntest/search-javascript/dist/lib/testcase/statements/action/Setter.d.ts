import { ContextBuilder } from "../../../testbuilding/ContextBuilder";
import { JavaScriptTestCaseSampler } from "../../sampling/JavaScriptTestCaseSampler";
import { Decoding, Statement } from "../Statement";
import { ClassActionStatement } from "./ClassActionStatement";
import { ConstructorCall } from "./ConstructorCall";
import { Getter } from "./Getter";
import { MethodCall } from "./MethodCall";
/**
 * @author Dimitri Stallenberg
 */
export declare class Setter extends ClassActionStatement {
    /**
     * Constructor
     * @param identifierDescription the return type options of the function
     * @param type always void
     * @param uniqueId id of the gene
     * @param property the name of the property
     * @param arg the argument of the setter
     */
    constructor(variableIdentifier: string, typeIdentifier: string, name: string, uniqueId: string, argument: Statement, constructor_: ConstructorCall);
    mutate(sampler: JavaScriptTestCaseSampler, depth: number): Getter | Setter | MethodCall;
    copy(): Setter;
    decode(context: ContextBuilder): Decoding[];
}
//# sourceMappingURL=Setter.d.ts.map