"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Javascript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodCall = void 0;
const analysis_javascript_1 = require("@syntest/analysis-javascript");
const prng_1 = require("@syntest/prng");
const ClassActionStatement_1 = require("./ClassActionStatement");
/**
 * MethodCall
 */
class MethodCall extends ClassActionStatement_1.ClassActionStatement {
    /**
     * Constructor
     * @param identifierDescription the return type options of the function
     * @param uniqueId id of the gene
     * @param methodName the name of the function
     * @param args the arguments of the function
     */
    constructor(variableIdentifier, typeIdentifier, name, uniqueId, arguments_, constructor_) {
        super(variableIdentifier, typeIdentifier, name, analysis_javascript_1.TypeEnum.FUNCTION, uniqueId, arguments_, constructor_);
    }
    mutate(sampler, depth) {
        const arguments_ = this.args.map((a) => a.copy());
        let constructor_ = this.constructor_.copy();
        const index = prng_1.prng.nextInt(0, arguments_.length);
        if (index < arguments_.length) {
            // go over each arg
            arguments_[index] = arguments_[index].mutate(sampler, depth + 1);
        }
        else {
            constructor_ = constructor_.mutate(sampler, depth + 1);
        }
        return new MethodCall(this.variableIdentifier, this.typeIdentifier, this.name, prng_1.prng.uniqueId(), arguments_, constructor_);
    }
    copy() {
        const deepCopyArguments = this.args.map((a) => a.copy());
        return new MethodCall(this.variableIdentifier, this.typeIdentifier, this.name, this.uniqueId, deepCopyArguments, this.constructor_.copy());
    }
    decode(context) {
        const constructorDecoding = this.constructor_.decode(context);
        const argumentsDecoding = this.args.flatMap((a) => a.decode(context));
        const arguments_ = this.args
            .map((a) => context.getOrCreateVariableName(a))
            .join(", ");
        const decoded = `const ${context.getOrCreateVariableName(this)} = await ${context.getOrCreateVariableName(this.constructor_)}.${this.name}(${arguments_})`;
        return [
            ...constructorDecoding,
            ...argumentsDecoding,
            {
                decoded: decoded,
                reference: this,
            },
        ];
    }
}
exports.MethodCall = MethodCall;
//# sourceMappingURL=MethodCall.js.map