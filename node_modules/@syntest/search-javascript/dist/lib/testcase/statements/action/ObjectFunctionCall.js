"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Javascript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectFunctionCall = void 0;
const analysis_javascript_1 = require("@syntest/analysis-javascript");
const prng_1 = require("@syntest/prng");
const search_1 = require("@syntest/search");
const ActionStatement_1 = require("./ActionStatement");
const ConstantObject_1 = require("./ConstantObject");
/**
 * @author Dimitri Stallenberg
 */
class ObjectFunctionCall extends ActionStatement_1.ActionStatement {
    /**
     * Constructor
     * @param identifierDescription the return type options of the function
     * @param type the return type of the function
     * @param uniqueId id of the gene
     * @param methodName the name of the function
     * @param args the arguments of the function
     */
    constructor(variableIdentifier, typeIdentifier, name, uniqueId, arguments_, object_) {
        super(variableIdentifier, typeIdentifier, name, analysis_javascript_1.TypeEnum.FUNCTION, uniqueId, arguments_);
        this._object = object_;
    }
    mutate(sampler, depth) {
        const arguments_ = this.args.map((a) => a.copy());
        let object_ = this._object.copy();
        const index = prng_1.prng.nextInt(0, arguments_.length);
        if (index < arguments_.length) {
            // go over each arg
            arguments_[index] = arguments_[index].mutate(sampler, depth + 1);
        }
        else {
            object_ = object_.mutate(sampler, depth + 1);
        }
        return new ObjectFunctionCall(this.variableIdentifier, this.typeIdentifier, this.name, prng_1.prng.uniqueId(), arguments_, object_);
    }
    setChild(index, newChild) {
        if (!newChild) {
            throw new Error("Invalid new child!");
        }
        if (index < 0 || index > this.args.length) {
            throw new Error((0, search_1.shouldNeverHappen)(`Invalid index used index: ${index}`));
        }
        if (index === this.args.length) {
            if (!(newChild instanceof ConstantObject_1.ConstantObject)) {
                throw new TypeError((0, search_1.shouldNeverHappen)("should be a constant object"));
            }
            this._object = newChild;
        }
        else {
            this.args[index] = newChild;
        }
    }
    hasChildren() {
        return true;
    }
    getChildren() {
        return [...this.args, this._object];
    }
    copy() {
        const deepCopyArguments = this.args.map((a) => a.copy());
        return new ObjectFunctionCall(this.variableIdentifier, this.typeIdentifier, this.name, this.uniqueId, deepCopyArguments, this._object.copy());
    }
    decode(context) {
        const objectDecoding = this._object.decode(context);
        const argumentsDecoding = this.args.flatMap((a) => a.decode(context));
        const arguments_ = this.args
            .map((a) => context.getOrCreateVariableName(a))
            .join(", ");
        const decoded = `const ${context.getOrCreateVariableName(this)} = await ${context.getOrCreateVariableName(this._object)}.${this.name}(${arguments_})`;
        return [
            ...objectDecoding,
            ...argumentsDecoding,
            {
                decoded: decoded,
                reference: this,
            },
        ];
    }
}
exports.ObjectFunctionCall = ObjectFunctionCall;
//# sourceMappingURL=ObjectFunctionCall.js.map