"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Javascript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegerStatement = void 0;
const analysis_javascript_1 = require("@syntest/analysis-javascript");
const prng_1 = require("@syntest/prng");
const NumericStatement_1 = require("./NumericStatement");
const PrimitiveStatement_1 = require("./PrimitiveStatement");
/**
 * Generic number class
 *
 * @author Dimitri Stallenberg
 */
class IntegerStatement extends PrimitiveStatement_1.PrimitiveStatement {
    constructor(variableIdentifier, typeIdentifier, name, uniqueId, value) {
        super(variableIdentifier, typeIdentifier, name, analysis_javascript_1.TypeEnum.INTEGER, uniqueId, Math.round(value));
    }
    mutate(sampler, depth) {
        if (prng_1.prng.nextBoolean(sampler.deltaMutationProbability)) {
            // 80%
            if (prng_1.prng.nextBoolean(0.5)) {
                // 50%
                return new NumericStatement_1.NumericStatement(this.variableIdentifier, this.typeIdentifier, this.name, prng_1.prng.uniqueId(), this.value).deltaMutation(sampler);
            }
            return this.deltaMutation(sampler);
        }
        else {
            // 20%
            if (prng_1.prng.nextBoolean(0.5)) {
                // 50%
                return sampler.sampleArgument(depth + 1, this.variableIdentifier, this.name);
            }
            else {
                // 50%
                return sampler.sampleInteger(this.variableIdentifier, this.typeIdentifier, this.name);
            }
        }
    }
    deltaMutation(sampler) {
        // small mutation
        const change = prng_1.prng.nextGaussian(0, 5);
        let newValue = Math.round(this.value + change);
        // If illegal values are not allowed we make sure the value does not exceed the specified bounds
        if (!sampler.exploreIllegalValues) {
            const max = Number.MAX_SAFE_INTEGER;
            const min = Number.MIN_SAFE_INTEGER;
            if (newValue > max) {
                newValue = max;
            }
            else if (newValue < min) {
                newValue = min;
            }
        }
        return new IntegerStatement(this.variableIdentifier, this.typeIdentifier, this.name, prng_1.prng.uniqueId(), newValue);
    }
    copy() {
        return new IntegerStatement(this.variableIdentifier, this.typeIdentifier, this.name, this.uniqueId, this.value);
    }
}
exports.IntegerStatement = IntegerStatement;
//# sourceMappingURL=IntegerStatement.js.map