"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Javascript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrowFunctionStatement = void 0;
const analysis_javascript_1 = require("@syntest/analysis-javascript");
const prng_1 = require("@syntest/prng");
const search_1 = require("@syntest/search");
const Statement_1 = require("../Statement");
/**
 * @author Dimitri Stallenberg
 */
class ArrowFunctionStatement extends Statement_1.Statement {
    constructor(variableIdentifier, typeIdentifier, name, uniqueId, parameters, returnValue) {
        super(variableIdentifier, typeIdentifier, name, analysis_javascript_1.TypeEnum.FUNCTION, uniqueId);
        this._parameters = parameters;
        this._returnValue = returnValue;
    }
    mutate(sampler, depth) {
        if (prng_1.prng.nextBoolean(sampler.deltaMutationProbability)) {
            // 80%
            return new ArrowFunctionStatement(this.variableIdentifier, this.typeIdentifier, this.name, prng_1.prng.uniqueId(), this._parameters, this.returnValue
                ? this._returnValue.mutate(sampler, depth + 1)
                : undefined);
        }
        else {
            // 20%
            if (prng_1.prng.nextBoolean(0.5)) {
                // 50%
                return sampler.sampleArgument(depth, this.variableIdentifier, this.name);
            }
            else {
                // 50%
                return sampler.sampleArrowFunction(depth, this.variableIdentifier, this.typeIdentifier, this.name);
            }
        }
    }
    copy() {
        return new ArrowFunctionStatement(this.variableIdentifier, this.typeIdentifier, this.name, this.uniqueId, this._parameters, this._returnValue);
    }
    decode(context) {
        if (this._returnValue === undefined) {
            return [
                {
                    decoded: `const ${context.getOrCreateVariableName(this)} = (${this._parameters.join(", ")}) => {};`,
                    reference: this,
                },
            ];
        }
        const returnStatement = this._returnValue.decode(context);
        const decoded = `const ${context.getOrCreateVariableName(this)} = (${this._parameters.join(", ")}) => { return ${context.getOrCreateVariableName(this.returnValue)} };`;
        return [
            ...returnStatement,
            {
                decoded: decoded,
                reference: this,
            },
        ];
    }
    getChildren() {
        if (this._returnValue === undefined) {
            return [];
        }
        return [this.returnValue];
    }
    hasChildren() {
        return this._returnValue !== undefined;
    }
    setChild(index, newChild) {
        if (!newChild) {
            throw new Error("Invalid new child!");
        }
        if (index !== 0) {
            throw new Error((0, search_1.shouldNeverHappen)(`Invalid index used index: ${index}`));
        }
        this._returnValue = newChild;
    }
    get returnValue() {
        return this._returnValue;
    }
}
exports.ArrowFunctionStatement = ArrowFunctionStatement;
//# sourceMappingURL=ArrowFunctionStatement.js.map