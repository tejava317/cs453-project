"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Javascript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayStatement = void 0;
const analysis_javascript_1 = require("@syntest/analysis-javascript");
const prng_1 = require("@syntest/prng");
const search_1 = require("@syntest/search");
const Statement_1 = require("../Statement");
/**
 * @author Dimitri Stallenberg
 */
class ArrayStatement extends Statement_1.Statement {
    constructor(variableIdentifier, typeIdentifier, name, uniqueId, elements) {
        super(variableIdentifier, typeIdentifier, name, analysis_javascript_1.TypeEnum.ARRAY, uniqueId);
        this._elements = elements;
        // check for circular
        for (const [index, statement] of this._elements.entries()) {
            if (statement && statement.uniqueId === this.uniqueId) {
                this._elements.splice(index, 1);
            }
        }
    }
    mutate(sampler, depth) {
        if (prng_1.prng.nextBoolean(sampler.deltaMutationProbability)) {
            const children = this._elements.map((a) => a.copy());
            const choice = prng_1.prng.nextDouble();
            if (children.length > 0) {
                if (choice < 0.33) {
                    // 33% chance to add a child on this position
                    const index = prng_1.prng.nextInt(0, children.length);
                    children.splice(index, 0, sampler.sampleArrayArgument(depth + 1, this.typeIdentifier));
                }
                else if (choice < 0.66) {
                    // 33% chance to remove a child on this position
                    const index = prng_1.prng.nextInt(0, children.length - 1);
                    children.splice(index, 1);
                }
                else {
                    // 33% chance to mutate a child on this position
                    const index = prng_1.prng.nextInt(0, children.length - 1);
                    children.splice(index, 1, sampler.sampleArrayArgument(depth + 1, this.typeIdentifier));
                }
            }
            else {
                // no children found so we always add
                children.push(sampler.sampleArrayArgument(depth + 1, this.typeIdentifier));
            }
            return new ArrayStatement(this.variableIdentifier, this.typeIdentifier, this.name, prng_1.prng.uniqueId(), children);
        }
        else {
            if (prng_1.prng.nextBoolean(0.5)) {
                // 50%
                return sampler.sampleArgument(depth, this.variableIdentifier, this.name);
            }
            else {
                // 50%
                return sampler.sampleArray(depth, this.variableIdentifier, this.typeIdentifier, this.name);
            }
        }
    }
    copy() {
        return new ArrayStatement(this.variableIdentifier, this.typeIdentifier, this.name, this.uniqueId, this._elements
            .filter((a) => {
            if (a.uniqueId === this.uniqueId) {
                console.log("circular detected");
                return false;
            }
            return true;
        })
            .map((a) => a.copy()));
    }
    decode(context) {
        const elementStatements = this._elements.flatMap((a) => a.decode(context));
        const elements = this._elements
            .map((a) => context.getOrCreateVariableName(a))
            .join(", ");
        const decoded = `const ${context.getOrCreateVariableName(this)} = [${elements}]`;
        return [
            ...elementStatements,
            {
                decoded: decoded,
                reference: this,
            },
        ];
    }
    getChildren() {
        return [...this.children];
    }
    hasChildren() {
        return this._elements.length > 0;
    }
    setChild(index, newChild) {
        if (!newChild) {
            throw new Error("Invalid new child!");
        }
        if (index < 0 || index >= this.children.length) {
            throw new Error((0, search_1.shouldNeverHappen)(`Invalid index used index: ${index}`));
        }
        this.children[index] = newChild;
    }
    get children() {
        return this._elements;
    }
}
exports.ArrayStatement = ArrayStatement;
//# sourceMappingURL=ArrayStatement.js.map