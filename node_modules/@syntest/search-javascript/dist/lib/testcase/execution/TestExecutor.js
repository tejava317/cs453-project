"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest JavaScript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Mocha = require("mocha");
const JavaScriptExecutionResult_1 = require("../../search/JavaScriptExecutionResult");
const SilentMochaReporter_1 = require("./SilentMochaReporter");
process.on("uncaughtException", (reason) => {
    throw reason;
});
process.on("unhandledRejection", (reason) => {
    throw reason;
});
// eslint-disable-next-line @typescript-eslint/no-misused-promises
process.on("message", async (data) => {
    if (typeof data !== "object") {
        throw new TypeError("Invalid data received from child process");
    }
    if (data.message === "run") {
        await runMocha(data.silent, data.paths, data.timeout);
    }
});
async function runMocha(silent, paths, timeout) {
    const argv = {
        reporter: silent ? SilentMochaReporter_1.SilentMochaReporter : undefined,
        // diff: false,
        // checkLeaks: false,
        // slow: 75,
        timeout: timeout,
        // watch: false,
        // parallel: false,
        // recursive: false,
        // sort: false,
    };
    const mocha = new Mocha(argv); // require('ts-node/register')
    // eslint-disable-next-line unicorn/prefer-module
    require("regenerator-runtime/runtime");
    // eslint-disable-next-line unicorn/prefer-module, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-var-requires
    require("@babel/register")({
        // eslint-disable-next-line unicorn/prefer-module
        presets: [require.resolve("@babel/preset-env")],
    });
    for (const _path of paths) {
        // eslint-disable-next-line unicorn/prefer-module
        delete require.cache[_path];
        mocha.addFile(_path);
    }
    let runner;
    // Finally, run mocha.
    await new Promise((resolve) => {
        runner = mocha.run((failures) => resolve(failures));
    });
    const suites = runner.suite.suites.map((suite) => {
        return {
            tests: suite.tests.map((test) => {
                let status;
                if (test.isPassed()) {
                    status = JavaScriptExecutionResult_1.JavaScriptExecutionStatus.PASSED;
                }
                else if (test.timedOut) {
                    status = JavaScriptExecutionResult_1.JavaScriptExecutionStatus.TIMED_OUT;
                }
                else {
                    status = JavaScriptExecutionResult_1.JavaScriptExecutionStatus.FAILED;
                }
                return {
                    status: status,
                    error: status === JavaScriptExecutionResult_1.JavaScriptExecutionStatus.FAILED
                        ? {
                            name: test.err.name,
                            message: test.err.message,
                            stack: test.err.stack,
                        }
                        : undefined,
                    duration: test.duration,
                };
            }),
        };
    });
    // Retrieve execution traces
    const result = {
        message: "done",
        suites: suites,
        stats: runner.stats,
        instrumentationData: global.__coverage__,
        metaData: global.__meta__,
        assertionData: global.__assertion__,
    };
    process.send(result);
    mocha.dispose();
}
//# sourceMappingURL=TestExecutor.js.map