import { ConstantPoolManager, RootContext } from "@syntest/analysis-javascript";
import { EncodingSampler } from "@syntest/search";
import { JavaScriptSubject } from "../../search/JavaScriptSubject";
import { JavaScriptTestCase } from "../JavaScriptTestCase";
import { StatementPool } from "../StatementPool";
import { ActionStatement } from "../statements/action/ActionStatement";
import { ConstantObject } from "../statements/action/ConstantObject";
import { ConstructorCall } from "../statements/action/ConstructorCall";
import { FunctionCall } from "../statements/action/FunctionCall";
import { Getter } from "../statements/action/Getter";
import { MethodCall } from "../statements/action/MethodCall";
import { ObjectFunctionCall } from "../statements/action/ObjectFunctionCall";
import { Setter } from "../statements/action/Setter";
import { ArrayStatement } from "../statements/complex/ArrayStatement";
import { ArrowFunctionStatement } from "../statements/complex/ArrowFunctionStatement";
import { ObjectStatement } from "../statements/complex/ObjectStatement";
import { BoolStatement } from "../statements/primitive/BoolStatement";
import { IntegerStatement } from "../statements/primitive/IntegerStatement";
import { NullStatement } from "../statements/primitive/NullStatement";
import { NumericStatement } from "../statements/primitive/NumericStatement";
import { StringStatement } from "../statements/primitive/StringStatement";
import { UndefinedStatement } from "../statements/primitive/UndefinedStatement";
import { Statement } from "../statements/Statement";
import { ConstantObjectGenerator } from "./generators/action/ConstantObjectGenerator";
import { ConstructorCallGenerator } from "./generators/action/ConstructorCallGenerator";
import { FunctionCallGenerator } from "./generators/action/FunctionCallGenerator";
import { GetterGenerator } from "./generators/action/GetterGenerator";
import { MethodCallGenerator } from "./generators/action/MethodCallGenerator";
import { ObjectFunctionCallGenerator } from "./generators/action/ObjectFunctionCallGenerator";
import { SetterGenerator } from "./generators/action/SetterGenerator";
/**
 * JavaScriptRandomSampler class
 *
 * @author Dimitri Stallenberg
 */
export declare abstract class JavaScriptTestCaseSampler extends EncodingSampler<JavaScriptTestCase> {
    private _rootContext;
    private _constantPoolManager;
    private _constantPoolEnabled;
    private _constantPoolProbability;
    private _typePoolEnabled;
    private _typePoolProbability;
    private _statementPoolEnabled;
    private _statementPoolProbability;
    private _typeInferenceMode;
    private _randomTypeProbability;
    private _incorporateExecutionInformation;
    private _maxActionStatements;
    private _stringAlphabet;
    private _stringMaxLength;
    private _deltaMutationProbability;
    private _exploreIllegalValues;
    private _statementPool;
    private _functionCallGenerator;
    private _constructorCallGenerator;
    private _methodCallGenerator;
    private _getterGenerator;
    private _setterGenerator;
    private _constantObjectGenerator;
    private _objectFunctionCallGenerator;
    constructor(subject: JavaScriptSubject, constantPoolManager: ConstantPoolManager, constantPoolEnabled: boolean, constantPoolProbability: number, typePoolEnabled: boolean, typePoolProbability: number, statementPoolEnabled: boolean, statementPoolProbability: number, typeInferenceMode: string, randomTypeProbability: number, incorporateExecutionInformation: boolean, maxActionStatements: number, stringAlphabet: string, stringMaxLength: number, deltaMutationProbability: number, exploreIllegalValues: boolean);
    get rootContext(): RootContext;
    set rootContext(rootContext: RootContext);
    get functionCallGenerator(): FunctionCallGenerator;
    get constructorCallGenerator(): ConstructorCallGenerator;
    get methodCallGenerator(): MethodCallGenerator;
    get getterGenerator(): GetterGenerator;
    get setterGenerator(): SetterGenerator;
    get constantObjectGenerator(): ConstantObjectGenerator;
    get objectFunctionCallGenerator(): ObjectFunctionCallGenerator;
    get statementPool(): StatementPool;
    set statementPool(statementPool: StatementPool);
    abstract sampleRoot(): ActionStatement;
    abstract sampleFunctionCall(depth: number): FunctionCall;
    abstract sampleConstructorCall(depth: number, classId?: string): ConstructorCall;
    abstract sampleClassAction(depth: number): MethodCall | Getter | Setter;
    abstract sampleMethodCall(depth: number): MethodCall;
    abstract sampleGetter(depth: number): Getter;
    abstract sampleSetter(depth: number): Setter;
    abstract sampleConstantObject(depth: number, objectId?: string): ConstantObject;
    abstract sampleObjectFunctionCall(depth: number): ObjectFunctionCall;
    abstract sampleArrayArgument(depth: number, arrayId: string): Statement;
    abstract sampleObjectArgument(depth: number, objectId: string, property?: string): Statement;
    abstract sampleArgument(depth: number, id: string, name: string): Statement;
    abstract sampleObject(depth: number, id: string, typeId: string, name: string): ObjectStatement | ConstructorCall | ConstantObject | FunctionCall;
    abstract sampleArray(depth: number, id: string, typeId: string, name: string): ArrayStatement;
    abstract sampleArrowFunction(depth: number, id: string, typeId: string, name: string): ArrowFunctionStatement;
    abstract sampleString(id: string, typeId: string, name: string, alphabet?: string, maxlength?: number): StringStatement;
    abstract sampleBool(id: string, typeId: string, name: string): BoolStatement;
    abstract sampleNull(id: string, typeId: string, name: string): NullStatement;
    abstract sampleNumber(id: string, typeId: string, name: string): NumericStatement;
    abstract sampleInteger(id: string, typeId: string, name: string): IntegerStatement;
    abstract sampleUndefined(id: string, typeId: string, name: string): UndefinedStatement;
    get constantPoolManager(): ConstantPoolManager;
    get constantPoolEnabled(): boolean;
    get constantPoolProbability(): number;
    get typePoolEnabled(): boolean;
    get typePoolProbability(): number;
    get statementPoolEnabled(): boolean;
    get statementPoolProbability(): number;
    get typeInferenceMode(): string;
    get randomTypeProbability(): number;
    get incorporateExecutionInformation(): boolean;
    get maxActionStatements(): number;
    get stringAlphabet(): string;
    get stringMaxLength(): number;
    get deltaMutationProbability(): number;
    get exploreIllegalValues(): boolean;
}
//# sourceMappingURL=JavaScriptTestCaseSampler.d.ts.map