import { ConstantPoolManager } from "@syntest/analysis-javascript";
import { JavaScriptSubject } from "../../search/JavaScriptSubject";
import { JavaScriptTestCase } from "../JavaScriptTestCase";
import { ActionStatement } from "../statements/action/ActionStatement";
import { ConstantObject } from "../statements/action/ConstantObject";
import { ConstructorCall } from "../statements/action/ConstructorCall";
import { FunctionCall } from "../statements/action/FunctionCall";
import { Getter } from "../statements/action/Getter";
import { MethodCall } from "../statements/action/MethodCall";
import { ObjectFunctionCall } from "../statements/action/ObjectFunctionCall";
import { Setter } from "../statements/action/Setter";
import { ArrayStatement } from "../statements/complex/ArrayStatement";
import { ArrowFunctionStatement } from "../statements/complex/ArrowFunctionStatement";
import { ObjectStatement } from "../statements/complex/ObjectStatement";
import { BoolStatement } from "../statements/primitive/BoolStatement";
import { IntegerStatement } from "../statements/primitive/IntegerStatement";
import { NullStatement } from "../statements/primitive/NullStatement";
import { NumericStatement } from "../statements/primitive/NumericStatement";
import { StringStatement } from "../statements/primitive/StringStatement";
import { UndefinedStatement } from "../statements/primitive/UndefinedStatement";
import { Statement } from "../statements/Statement";
import { JavaScriptTestCaseSampler } from "./JavaScriptTestCaseSampler";
export declare class JavaScriptRandomSampler extends JavaScriptTestCaseSampler {
    constructor(subject: JavaScriptSubject, constantPoolManager: ConstantPoolManager, constantPoolEnabled: boolean, constantPoolProbability: number, typePoolEnabled: boolean, typePoolProbability: number, statementPoolEnabled: boolean, statementPoolProbability: number, typeInferenceMode: string, randomTypeProbability: number, incorporateExecutionInformation: boolean, maxActionStatements: number, stringAlphabet: string, stringMaxLength: number, deltaMutationProbability: number, exploreIllegalValues: boolean);
    sample(): JavaScriptTestCase;
    sampleRoot(): ActionStatement;
    sampleFunctionCall(depth: number): FunctionCall;
    private _getClass;
    sampleConstructorCall(depth: number, classId?: string): ConstructorCall;
    sampleClassAction(depth: number): MethodCall | Getter | Setter;
    sampleMethodCall(depth: number): MethodCall;
    sampleGetter(depth: number): Getter;
    sampleSetter(depth: number): Setter;
    private _getObject;
    sampleConstantObject(depth: number, objectId?: string): ConstantObject;
    sampleObjectFunctionCall(depth: number): ObjectFunctionCall;
    sampleArrayArgument(depth: number, arrayId: string): Statement;
    sampleObjectArgument(depth: number, objectTypeId: string, property: string): Statement;
    sampleArgument(depth: number, id: string, name: string): Statement;
    sampleObject(depth: number, id: string, typeId: string, name: string): ConstructorCall | FunctionCall | ConstantObject | ObjectStatement;
    sampleArray(depth: number, id: string, typeId: string, name: string): ArrayStatement;
    sampleArrowFunction(depth: number, id: string, typeId: string, name: string): ArrowFunctionStatement;
    sampleString(id: string, typeId: string, name: string): StringStatement;
    sampleBool(id: string, typeId: string, name: string): BoolStatement;
    sampleNull(id: string, typeId: string, name: string): NullStatement;
    sampleNumber(id: string, typeId: string, name: string): NumericStatement;
    sampleInteger(id: string, typeId: string, name: string): IntegerStatement;
    sampleUndefined(id: string, typeId: string, name: string): UndefinedStatement;
}
//# sourceMappingURL=JavaScriptRandomSampler.d.ts.map