"use strict";
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Javascript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaScriptTestCaseSampler = void 0;
const search_1 = require("@syntest/search");
const ConstantObjectGenerator_1 = require("./generators/action/ConstantObjectGenerator");
const ConstructorCallGenerator_1 = require("./generators/action/ConstructorCallGenerator");
const FunctionCallGenerator_1 = require("./generators/action/FunctionCallGenerator");
const GetterGenerator_1 = require("./generators/action/GetterGenerator");
const MethodCallGenerator_1 = require("./generators/action/MethodCallGenerator");
const ObjectFunctionCallGenerator_1 = require("./generators/action/ObjectFunctionCallGenerator");
const SetterGenerator_1 = require("./generators/action/SetterGenerator");
/**
 * JavaScriptRandomSampler class
 *
 * @author Dimitri Stallenberg
 */
class JavaScriptTestCaseSampler extends search_1.EncodingSampler {
    constructor(subject, constantPoolManager, constantPoolEnabled, constantPoolProbability, typePoolEnabled, typePoolProbability, statementPoolEnabled, statementPoolProbability, typeInferenceMode, randomTypeProbability, incorporateExecutionInformation, maxActionStatements, stringAlphabet, stringMaxLength, deltaMutationProbability, exploreIllegalValues) {
        super(subject);
        this._constantPoolManager = constantPoolManager;
        this._constantPoolEnabled = constantPoolEnabled;
        this._constantPoolProbability = constantPoolProbability;
        this._typePoolEnabled = typePoolEnabled;
        this._typePoolProbability = typePoolProbability;
        this._statementPoolEnabled = statementPoolEnabled;
        this._statementPoolProbability = statementPoolProbability;
        this._typeInferenceMode = typeInferenceMode;
        this._randomTypeProbability = randomTypeProbability;
        this._incorporateExecutionInformation = incorporateExecutionInformation;
        this._maxActionStatements = maxActionStatements;
        this._stringAlphabet = stringAlphabet;
        this._stringMaxLength = stringMaxLength;
        this._deltaMutationProbability = deltaMutationProbability;
        this._exploreIllegalValues = exploreIllegalValues;
    }
    get rootContext() {
        return this._rootContext;
    }
    set rootContext(rootContext) {
        this._rootContext = rootContext;
        this._functionCallGenerator = new FunctionCallGenerator_1.FunctionCallGenerator(this, rootContext, this._statementPoolEnabled, this._statementPoolProbability);
        this._constructorCallGenerator = new ConstructorCallGenerator_1.ConstructorCallGenerator(this, rootContext, this._statementPoolEnabled, this._statementPoolProbability);
        this._methodCallGenerator = new MethodCallGenerator_1.MethodCallGenerator(this, rootContext, this._statementPoolEnabled, this._statementPoolProbability);
        this._getterGenerator = new GetterGenerator_1.GetterGenerator(this, rootContext, this._statementPoolEnabled, this._statementPoolProbability);
        this._setterGenerator = new SetterGenerator_1.SetterGenerator(this, rootContext, this._statementPoolEnabled, this._statementPoolProbability);
        this._constantObjectGenerator = new ConstantObjectGenerator_1.ConstantObjectGenerator(this, rootContext, this._statementPoolEnabled, this._statementPoolProbability);
        this._objectFunctionCallGenerator = new ObjectFunctionCallGenerator_1.ObjectFunctionCallGenerator(this, rootContext, this._statementPoolEnabled, this._statementPoolProbability);
    }
    get functionCallGenerator() {
        return this._functionCallGenerator;
    }
    get constructorCallGenerator() {
        return this._constructorCallGenerator;
    }
    get methodCallGenerator() {
        return this._methodCallGenerator;
    }
    get getterGenerator() {
        return this._getterGenerator;
    }
    get setterGenerator() {
        return this._setterGenerator;
    }
    get constantObjectGenerator() {
        return this._constantObjectGenerator;
    }
    get objectFunctionCallGenerator() {
        return this._objectFunctionCallGenerator;
    }
    get statementPool() {
        return this._statementPool;
    }
    set statementPool(statementPool) {
        this._statementPool = statementPool;
    }
    get constantPoolManager() {
        return this._constantPoolManager;
    }
    get constantPoolEnabled() {
        return this._constantPoolEnabled;
    }
    get constantPoolProbability() {
        return this._constantPoolProbability;
    }
    get typePoolEnabled() {
        return this._typePoolEnabled;
    }
    get typePoolProbability() {
        return this._typePoolProbability;
    }
    get statementPoolEnabled() {
        return this._statementPoolEnabled;
    }
    get statementPoolProbability() {
        return this._statementPoolProbability;
    }
    get typeInferenceMode() {
        return this._typeInferenceMode;
    }
    get randomTypeProbability() {
        return this._randomTypeProbability;
    }
    get incorporateExecutionInformation() {
        return this._incorporateExecutionInformation;
    }
    get maxActionStatements() {
        return this._maxActionStatements;
    }
    get stringAlphabet() {
        return this._stringAlphabet;
    }
    get stringMaxLength() {
        return this._stringMaxLength;
    }
    get deltaMutationProbability() {
        return this._deltaMutationProbability;
    }
    get exploreIllegalValues() {
        return this._exploreIllegalValues;
    }
}
exports.JavaScriptTestCaseSampler = JavaScriptTestCaseSampler;
//# sourceMappingURL=JavaScriptTestCaseSampler.js.map