"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatementPool = void 0;
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest JavaScript.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const prng_1 = require("@syntest/prng");
const ClassActionStatement_1 = require("./statements/action/ClassActionStatement");
const ConstantObject_1 = require("./statements/action/ConstantObject");
const ConstructorCall_1 = require("./statements/action/ConstructorCall");
const FunctionCall_1 = require("./statements/action/FunctionCall");
const ObjectFunctionCall_1 = require("./statements/action/ObjectFunctionCall");
class StatementPool {
    constructor(roots) {
        this.pool = new Map();
        this.constructors = [];
        this.objects = [];
        this._fillGenePool(roots);
    }
    getRandomStatement(type) {
        const statements = this.pool.get(type);
        if (!statements || statements.length === 0) {
            return undefined;
        }
        return prng_1.prng.pickOne(statements);
    }
    getRandomConstructor(exportId) {
        const options = exportId
            ? this.constructors.filter((o) => exportId === o.export.id)
            : this.constructors;
        if (options.length === 0) {
            return undefined;
        }
        return prng_1.prng.pickOne(options);
    }
    getRandomConstantObject(exportId) {
        const options = exportId
            ? this.objects.filter((o) => exportId === o.export.id)
            : this.objects;
        if (options.length === 0) {
            return undefined;
        }
        return prng_1.prng.pickOne(options);
    }
    _fillGenePool(roots) {
        for (const action of roots) {
            const queue = [action];
            while (queue.length > 0) {
                const statement = queue.pop();
                if (statement.hasChildren()) {
                    queue.push(...statement.getChildren());
                }
                // use type enum for primitives and arrays
                let type = statement.ownType;
                if (statement instanceof ConstantObject_1.ConstantObject) {
                    // use export identifier
                    type = statement.export.id;
                    this.objects.push(statement);
                }
                else if (statement instanceof ConstructorCall_1.ConstructorCall) {
                    // use export identifier
                    type = statement.export.id;
                    this.constructors.push(statement);
                }
                else if (statement instanceof FunctionCall_1.FunctionCall ||
                    statement instanceof ClassActionStatement_1.ClassActionStatement ||
                    statement instanceof ObjectFunctionCall_1.ObjectFunctionCall) {
                    // TODO use return type
                    // type = statement.
                    // skip for now
                    continue;
                }
                if (!this.pool.has(type)) {
                    this.pool.set(type, []);
                }
                this.pool.get(type).push(statement);
            }
        }
    }
}
exports.StatementPool = StatementPool;
//# sourceMappingURL=StatementPool.js.map