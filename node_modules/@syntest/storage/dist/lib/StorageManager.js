"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageManager = void 0;
/*
 * Copyright 2020-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const node_fs_1 = require("node:fs");
const path = require("node:path");
const logging_1 = require("@syntest/logging");
const fs_extra_1 = require("fs-extra");
class StorageManager {
    get args() {
        return this._arguments;
    }
    set args(_arguments) {
        this._arguments = _arguments;
        StorageManager.LOGGER = (0, logging_1.getLogger)("StorageManager");
    }
    getFullPath(directoryPath, temporary = false) {
        for (const pathPart of directoryPath) {
            if (pathPart.includes("/") || pathPart.includes("\\")) {
                throw new Error("Storage path cannot contain any of the following characters /\\");
            }
        }
        if (temporary) {
            return path.resolve(path.join(this.args.tempSyntestDirectory, this.args.fid, ...directoryPath));
        }
        return path.resolve(path.join(this.args.syntestDirectory, this.args.fid, ...directoryPath));
    }
    createDirectory(directoryPath, temporary = false) {
        const fullPath = this.getFullPath(directoryPath, temporary);
        if ((0, node_fs_1.existsSync)(fullPath)) {
            return;
        }
        (0, node_fs_1.mkdirSync)(fullPath, { recursive: true });
    }
    deleteTemporaryDirectory(directoryPath) {
        const fullPath = this.getFullPath(directoryPath, true);
        if (!(0, node_fs_1.existsSync)(fullPath)) {
            return;
        }
        (0, node_fs_1.rmSync)(fullPath, {
            recursive: true,
            force: true,
        });
    }
    clearTemporaryDirectory(directoryPath) {
        const fullPath = this.getFullPath(directoryPath, true);
        if (!(0, node_fs_1.existsSync)(fullPath)) {
            return;
        }
        const files = (0, node_fs_1.readdirSync)(fullPath);
        for (const file of files) {
            (0, node_fs_1.unlinkSync)(path.join(fullPath, file));
        }
    }
    createDirectories(directoriesPaths, temporary = false) {
        for (const directoryPath of directoriesPaths) {
            this.createDirectory(directoryPath, temporary);
        }
    }
    deleteTemporaryDirectories(directoriesPaths) {
        for (const directoryPath of directoriesPaths) {
            this.deleteTemporaryDirectory(directoryPath);
        }
    }
    deleteMainTemporary() {
        const directory = this.args
            .tempSyntestDirectory;
        if (!(0, node_fs_1.existsSync)(directory)) {
            return;
        }
        (0, node_fs_1.rmSync)(directory, {
            recursive: true,
            force: true,
        });
    }
    clearTemporaryDirectories(directoriesPaths) {
        for (const directoryPath of directoriesPaths) {
            this.clearTemporaryDirectory(directoryPath);
        }
    }
    /**
     *
     * @param storagePath
     * @param fileName
     * @param data
     * @param temporary
     * @param append
     *
     * @returns the path we saved to
     */
    store(storagePath, fileName, data, temporary = false, append = false) {
        if (fileName.includes("/") || fileName.includes("\\")) {
            throw new Error("filename cannot contain any of the following characters /\\");
        }
        for (const pathPart of storagePath) {
            if (pathPart.includes("/") || pathPart.includes("\\")) {
                throw new Error("Storage path cannot contain any of the following characters /\\");
            }
        }
        this.createDirectory(storagePath, temporary);
        const fullPath = path.join(this.getFullPath(storagePath, temporary), fileName);
        if (append && (0, node_fs_1.existsSync)(fullPath)) {
            (0, node_fs_1.appendFileSync)(fullPath, data);
        }
        else {
            (0, node_fs_1.writeFileSync)(fullPath, data);
        }
        return fullPath;
    }
    deleteTemporary(directoryPath, fileName) {
        // check if temporary
        const fullPath = path.join(this.getFullPath(directoryPath, true), fileName);
        if (!(0, node_fs_1.existsSync)(fullPath)) {
            return;
        }
        try {
            (0, node_fs_1.unlinkSync)(fullPath);
        }
        catch (error) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            StorageManager.LOGGER.debug(error);
        }
    }
    copyToTemporaryDirectory(originalDirectoryPath, destinationDirectoryPath) {
        const originalPath = path.join(...originalDirectoryPath);
        const destinationPath = this.getFullPath(destinationDirectoryPath, true);
        (0, fs_extra_1.copySync)(originalPath, destinationPath);
    }
}
exports.StorageManager = StorageManager;
//# sourceMappingURL=StorageManager.js.map