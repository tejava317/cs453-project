"use strict";
/*
 * Copyright 2023-2023 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cannotFindTraceThatIsCovered = exports.moreThanTwoOutgoingEdges = exports.lessThanTwoOutgoingEdges = exports.emptyArray = exports.singletonAlreadySet = exports.singletonNotSet = exports.maximumValue = exports.minimumValue = exports.shouldNeverHappen = void 0;
/**
 * This file is meant to provide consistent error messages throughout the tool.
 */
const shouldNeverHappen = (bugLocation) => `This should never happen.\nThere is likely a bug in the ${bugLocation}.`;
exports.shouldNeverHappen = shouldNeverHappen;
const minimumValue = (name, minimum, actual) => `The '${name}' should be greater than or equal to ${minimum} but is ${actual}.`;
exports.minimumValue = minimumValue;
const maximumValue = (name, maximum, actual) => `The '${name}' should be smaller than or equal to ${maximum} but is ${actual}.`;
exports.maximumValue = maximumValue;
const singletonNotSet = (name) => `The ${name} singleton has not been set yet!`;
exports.singletonNotSet = singletonNotSet;
const singletonAlreadySet = (name) => `The ${name} singleton has already been set!`;
exports.singletonAlreadySet = singletonAlreadySet;
const emptyArray = (variableName) => `'${variableName}' cannot be empty!`;
exports.emptyArray = emptyArray;
const lessThanTwoOutgoingEdges = (nodeId, branchObjectiveFunctionId) => `This should never happen.\nNode has less than two outgoing edges! \nNode id: ${nodeId}\nBranch objective function id: ${branchObjectiveFunctionId}`;
exports.lessThanTwoOutgoingEdges = lessThanTwoOutgoingEdges;
const moreThanTwoOutgoingEdges = (nodeId, branchObjectiveFunctionId) => `This should never happen.\nNode has more than two outgoing edges! \nNode id: ${nodeId}\nBranch objective function id: ${branchObjectiveFunctionId}`;
exports.moreThanTwoOutgoingEdges = moreThanTwoOutgoingEdges;
const cannotFindTraceThatIsCovered = () => `Cannot find the branch trace that is covered`;
exports.cannotFindTraceThatIsCovered = cannotFindTraceThatIsCovered;
//# sourceMappingURL=diagnostics.js.map