"use strict";
/*
 * Copyright 2020-2021 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StagnationBudget = void 0;
const logging_1 = require("@syntest/logging");
/**
 * Budget for the number of iteration performed without progress during the search process.
 *
 * @author Mitchell Olsthoorn
 */
class StagnationBudget {
    /**
     * Constructor.
     *
     * @param maxIterations The maximum number of iterations without progress of this budget
     */
    constructor(maxIterations = Number.MAX_SAFE_INTEGER) {
        StagnationBudget.LOGGER = (0, logging_1.getLogger)("StagnationBudget");
        this._currentIterations = 0;
        this._maxIterations = maxIterations;
        this._bestProgress = 0;
        this._tracking = false;
    }
    /**
     * @inheritDoc
     */
    getRemainingBudget() {
        return this._maxIterations - this._currentIterations;
    }
    /**
     * @inheritDoc
     */
    getUsedBudget() {
        return this._currentIterations;
    }
    /**
     * @inheritDoc
     */
    getTotalBudget() {
        return this._maxIterations;
    }
    /**
     * @inheritDoc
     */
    reset() {
        StagnationBudget.LOGGER.silly("reset");
        this._currentIterations = 0;
        this._bestProgress = 0;
        this._tracking = false;
    }
    /**
     * @inheritDoc
     */
    initializationStarted() {
        StagnationBudget.LOGGER.silly("initializationStarted");
    }
    /**
     * @inheritDoc
     */
    initializationStopped() {
        StagnationBudget.LOGGER.silly("initializationStopped");
    }
    /**
     * @inheritDoc
     */
    searchStarted() {
        StagnationBudget.LOGGER.silly("searchStarted");
        this._tracking = true;
    }
    /**
     * @inheritDoc
     */
    searchStopped() {
        StagnationBudget.LOGGER.silly("searchStopped");
        this._tracking = false;
    }
    /**
     * @inheritDoc
     */
    iteration(searchAlgorithm) {
        StagnationBudget.LOGGER.silly("iteration");
        if (this._tracking && this._currentIterations < this._maxIterations) {
            if (searchAlgorithm.progress("branch") > this._bestProgress) {
                this._currentIterations = 0;
            }
            else {
                this._currentIterations++;
            }
        }
    }
    /**
     * @inheritDoc
     */
    evaluation() {
        StagnationBudget.LOGGER.silly("evaluation");
    }
}
exports.StagnationBudget = StagnationBudget;
//# sourceMappingURL=StagnationBudget.js.map