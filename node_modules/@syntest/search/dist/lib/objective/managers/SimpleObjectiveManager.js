"use strict";
/*
 * Copyright 2020-2021 Delft University of Technology and SynTest contributors
 *
 * This file is part of SynTest Framework - SynTest Core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleObjectiveManager = void 0;
const ObjectiveManager_1 = require("./ObjectiveManager");
const PopulationBasedObjectiveManager_1 = require("./PopulationBasedObjectiveManager");
/**
 * A simple objective manager that always evaluates an encoding on all objectives.
 *
 * @author Mitchell Olsthoorn
 */
class SimpleObjectiveManager extends PopulationBasedObjectiveManager_1.PopulationBasedObjectiveManager {
    /**
     * @inheritDoc
     * @protected
     * @override
     */
    _updateArchive(objectiveFunction, encoding) {
        ObjectiveManager_1.ObjectiveManager.LOGGER.debug("updating archive");
        this._archive.update(objectiveFunction, encoding, true);
    }
    /**
     * @inheritDoc
     * @protected
     */
    _updateObjectives(objectiveFunction) {
        // Remove objective from the uncovered objectives
        this._uncoveredObjectives.delete(objectiveFunction);
        // Add objective to the covered objectives
        this._coveredObjectives.add(objectiveFunction);
        return [];
    }
    /**
     * @inheritDoc
     */
    load(subject) {
        // Set the subject
        this._subject = subject;
        // Reset the objective manager
        this._reset();
        // Add all objectives to both the uncovered objectives and the current objectives
        const objectives = subject.getObjectives();
        for (const objective of objectives) {
            this._uncoveredObjectives.add(objective);
            this._currentObjectives.add(objective);
        }
    }
}
exports.SimpleObjectiveManager = SimpleObjectiveManager;
//# sourceMappingURL=SimpleObjectiveManager.js.map