import { Logger } from "@syntest/logging";
import { Distribution, DistributionMetric, DistributionsMap, Metric, MetricName, PropertiesMap, PropertyMetric, Series, SeriesDistributionMetric, SeriesIndex, SeriesMap, SeriesMeasurementMetric, SeriesMetric, SeriesUnit } from "./Metric";
import { Middleware } from "./Middleware";
export declare class MetricManager {
    protected static LOGGER: Logger;
    private _namespacedManagers;
    getNamespaced(namespace: string): MetricManager;
    private _namespace;
    private _metrics;
    private _outputMetrics;
    private properties;
    private distributions;
    private series;
    private seriesDistributions;
    private seriesMeasurements;
    constructor(namespace: string);
    get outputMetrics(): Metric[];
    merge(other: MetricManager): void;
    getMergedNamespacedManager(namespace: string): MetricManager;
    setOutputMetrics(metrics: string[]): void;
    get metrics(): Metric[];
    set metrics(metrics: Metric[]);
    get namespacedManagers(): Map<string, MetricManager>;
    get namespace(): string;
    runPipeline(middleware: Middleware[]): Promise<void>;
    recordProperty(property: MetricName, value: string): void;
    recordDistribution(distributionName: MetricName, value: number): void;
    recordSeries(seriesName: MetricName, seriesUnit: SeriesUnit, seriesIndex: SeriesIndex, value: number): void;
    recordSeriesDistribution(seriesDistributionName: MetricName, seriesUnit: SeriesUnit, seriesIndex: SeriesIndex, value: number): void;
    recordSeriesMeasurement(seriesMeasurementName: MetricName, seriesUnit: SeriesUnit, seriesIndex: SeriesIndex, key: string, value: number): void;
    getProperty(property: MetricName): string | undefined;
    getDistribution(distributionName: MetricName): Distribution | undefined;
    getSeries(seriesName: MetricName, seriesUnit: SeriesUnit): Map<SeriesIndex, number> | undefined;
    getSeriesDistribution(seriesDistributionName: MetricName, seriesUnit: SeriesUnit): Map<SeriesIndex, number[]> | undefined;
    getSeriesMeasurement(seriesMeasurementName: string, seriesUnit: SeriesUnit): Series<PropertiesMap<number>> | undefined;
    getAllProperties(): PropertiesMap<string>;
    getAllDistributions(): DistributionsMap;
    getAllSeries(): SeriesMap<number>;
    getAllSeriesDistributions(): SeriesMap<Distribution>;
    getAllSeriesMeasurements(): SeriesMap<PropertiesMap<number>>;
    collectProperties(wanted: PropertyMetric[]): PropertiesMap<string>;
    collectDistributions(wanted: DistributionMetric[]): DistributionsMap;
    collectSeries(wanted: SeriesMetric[]): SeriesMap<number>;
    collectSeriesDistributions(wanted: SeriesDistributionMetric[]): SeriesMap<Distribution>;
    collectSeriesMeasurements(wanted: SeriesMeasurementMetric[]): SeriesMap<PropertiesMap<number>>;
}
//# sourceMappingURL=MetricManager.d.ts.map